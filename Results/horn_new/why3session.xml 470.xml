<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn_fF.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0" obsolete="true"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="323693"/></proof>
 <proof prover="3"><result status="valid" time="0.09"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="498478"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.20" steps="36362"/></proof>
  <proof prover="5"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="27361"/></proof>
  <proof prover="5"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="32013"/></proof>
  <proof prover="5"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="30230"/></proof>
 <proof prover="5"><result status="valid" time="0.24"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28226"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.20"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="777962"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="276023"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="821915"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1610507"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="27948"/></proof>
    <proof prover="5" obsolete="true"><result status="valid" time="0.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28807"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.19"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="27690"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.15"/></proof>
 </goal>
</theory>
<theory name="Converts" proved="true">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="30327"/></proof>
 <proof prover="5"><result status="valid" time="0.17"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="28518"/></proof>
 <proof prover="5"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="29036"/></proof>
 <proof prover="5"><result status="valid" time="0.13"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="29883"/></proof>
 <proof prover="5"><result status="valid" time="0.24"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1" obsolete="true"><result status="valid" time="0.24" steps="725"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="148366"/></proof>
 <proof prover="4"><result status="valid" time="0.45" steps="801"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="778852"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="139395"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="779701"/></proof>
  <proof prover="1" obsolete="true"><result status="valid" time="0.99" steps="1492"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479121"/></proof>
  <proof prover="3"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" timelimit="5"><result status="valid" time="2.47" steps="1723"/></proof>
  <proof prover="5"><result status="timeout" time="1.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="821118"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1536345"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="822183"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1544362"/></proof>
  <transf name="unfold" proved="true" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <transf name="compile_match" proved="true" >
    <goal name="PLtoAF_AFtoPL.0.0.0" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1491924"/></proof>
    <transf name="destruct_term" proved="true" arg1="x">
     <goal name="PLtoAF_AFtoPL.0.0.0.0" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.07" steps="25488"/></proof>
     <proof prover="5"><result status="valid" time="0.21"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.1" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="29256"/></proof>
     <proof prover="5"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.2" proved="true">
     <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="29377"/></proof>
     <proof prover="5"><result status="valid" time="0.12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Logic" proved="true">
 <goal name="subset_findFirst" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="151606"/></proof>
   <proof prover="4"><result status="valid" time="0.15" steps="722"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2348909"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="368789"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="64502"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="algorithmA&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7261231"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1703534"/></proof>
  <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="31890"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2611441"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="255330"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2474757"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="210489"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.1.0" expl="unreachable point" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="32599"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="G" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="27323"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="550053"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131419"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="27058"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="33099"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.36" steps="62950"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="30658"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="40345"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="33463"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.29"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="36624"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.34"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.71" steps="82051"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="33267"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="36193"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.28"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2526385"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="156748"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3004081"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191990"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="unfold" proved="true" arg1="op_and">
   <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2860096"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205797"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="phi">
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="2"><result status="valid" time="0.17" steps="36169"/></proof>
    </goal>
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294999"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205196"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="subst" proved="true" arg1="phi">
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
     <transf name="compile_match" proved="true" >
      <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
      <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="5333857"/></proof>
      <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1429260"/></proof>
      <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="instantiate" proved="true" arg1="convertAFtoPL&#39;spec" arg2="y">
       <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2461630"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191714"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="2463322"/></proof>
        <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1246748"/></proof>
        <proof prover="4" timelimit="5"><result status="valid" time="3.76" steps="2961"/></proof>
        </goal>
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2473181"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="377456"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="compile_match" proved="true" >
         <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2457666"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="377456"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="2"><result status="valid" time="0.07" steps="28156"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2354617"/></proof>
          <proof prover="2"><result status="timeout" time="1.00" steps="325647"/></proof>
          <proof prover="4"><result status="valid" time="1.91" steps="589"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0"><result status="timeout" time="1.00" steps="2457626"/></proof>
          <proof prover="2"><result status="timeout" time="1.00" steps="378035"/></proof>
          <proof prover="4"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct_term" proved="true" arg1="x1">
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.19" steps="37003"/></proof>
           </goal>
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.17" steps="34729"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2204716"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="143462"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2386192"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="188562"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="destruct" proved="true" arg1="H">
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="2179462"/></proof>
   <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1309185"/></proof>
   <proof prover="4" timelimit="5"><result status="valid" time="2.42" steps="2028"/></proof>
   </goal>
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2177399"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="171226"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294031"/></proof>
    <proof prover="2"><result status="valid" time="0.35" steps="61394"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="2.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_subset&#39;vc" expl="VC for convertConjunctionToSet_lemma_subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2214754"/></proof>
 <proof prover="2"><result status="valid" time="0.20" steps="39747"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.30" steps="50330"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.47"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="1" obsolete="true"><result status="valid" time="0.37" steps="1864"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="158924"/></proof>
 <proof prover="4"><result status="valid" time="0.32" steps="1855"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="35368"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.29"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="38953"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.47"/></proof>
 </goal>
 <goal name="fset_from_list_distr" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2288993"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="278942"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fset_from_list_distr.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2440900"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="285750"/></proof>
  <transf name="induction_arg_ty_lex" proved="true" arg1="left">
   <goal name="fset_from_list_distr.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fset_from_list_distr.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.15" steps="37081"/></proof>
    <proof prover="5" obsolete="true"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="fset_from_list_distr.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2572017"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="214456"/></proof>
    <transf name="compute_hyp_specified" proved="true" >
     <goal name="fset_from_list_distr.0.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.21" steps="43466"/></proof>
     <proof prover="5" obsolete="true"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2020902"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="200956"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="161008"/></proof>
   <proof prover="4"><result status="valid" time="0.17" steps="945"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2579569"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="357655"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.46" steps="92536"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_spec&#39;vc" expl="VC for algorithmA_spec" proved="true">
 <proof prover="2"><result status="valid" time="1.40" steps="138029"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2689989"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="195307"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="197388"/></proof>
  <proof prover="4"><result status="valid" time="0.05" steps="38"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2291285"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="268669"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="55"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="36028"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="36101"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.06" steps="42"/></proof>
   <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="173835"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="42"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.00" steps="141409"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330209"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="212010"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2416853"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="210222"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3068786"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="173169"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="151407"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="47"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2287664"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="197037"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.27" steps="49705"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="47"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2646813"/></proof>
    <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="58"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="174345"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="52545"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294612"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="243686"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="13235241"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1103557"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="158228"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="47"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.37"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7196568"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1109409"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.25" steps="47538"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="47"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.39"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2990973"/></proof>
    <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="58"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="174222"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="52706"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3292799"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="220076"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2523035"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="196368"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2299219"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="189498"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="37"/></proof>
    <transf name="destruct" arg1="H2">
     <goal name="not_subset_findFirst.0.0.1.0" expl="destruct premise">
     <proof prover="2"><undone/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="37"/></proof>
     </goal>
     <goal name="not_subset_findFirst.0.0.1.1">
     <proof prover="0"><result status="timeout" time="1.00" steps="2403706"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="207880"/></proof>
     <proof prover="4"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="H2">
      <goal name="not_subset_findFirst.0.0.1.1.0">
      <proof prover="2"><undone/></proof>
      <proof prover="4"><result status="valid" time="0.05" steps="263"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="not_subset_findFirst.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2411582"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="206302"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_findFirst.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="timeout" time="1.00" steps="175183"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="37"/></proof>
     </goal>
     <goal name="not_subset_findFirst.0.0.1.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2562238"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="207687"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_findFirst.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="164812"/></proof>
      <proof prover="4"><result status="valid" time="0.05" steps="263"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2561558"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="38069"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="not_subset.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2050239"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.20" steps="37443"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="not_subset.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1737343"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.19" steps="35871"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2187633"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="valid" time="0.19" steps="42206"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.25"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2513296"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="112447"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="algorithmA&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="61"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="185873"/></proof>
  <proof prover="4"><result status="valid" time="0.06" steps="46"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="39974"/></proof>
  <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="59"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2593413"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="189661"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2357870"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="190849"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="induction_arg_ty_lex" proved="true" arg1="x">
    <goal name="algorithmA&#39;vc.2.0.0" expl="VC for algorithmA" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="41111"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3009264"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187399"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="induction_arg_ty_lex" proved="true" arg1="x">
    <goal name="algorithmA&#39;vc.2.1.0" expl="VC for algorithmA" proved="true">
    <proof prover="2"><result status="valid" time="0.40" steps="47872"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2779925"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179859"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3173253"/></proof>
   <proof prover="2"><result status="valid" time="0.25" steps="37808"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2413841"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.26" steps="49809"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2907154"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="185662"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2960633"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="173890"/></proof>
   <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list clauselist)">
    <goal name="algorithmA&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(to_fset c)">
     <goal name="algorithmA&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2636604"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165815"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="assert" proved="true" arg1="(exists l r. findFirst (fset_from_list clauselist) (to_fset c) = (l,r))">
      <goal name="algorithmA&#39;vc.4.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2903632"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="215403"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="algorithmA&#39;vc.4.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.09" steps="36771"/></proof>
       </goal>
       <goal name="algorithmA&#39;vc.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2637881"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="216018"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="compute_hyp_specified" proved="true" >
        <goal name="algorithmA&#39;vc.4.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.23" steps="49453"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="algorithmA&#39;vc.4.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.15" steps="38712"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.70" steps="1633"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;spec" arg2="(fset_from_list clauselist)">
    <goal name="algorithmA&#39;vc.4.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(to_fset c)">
     <goal name="algorithmA&#39;vc.4.1.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists l r. findFirst (fset_from_list clauselist) (to_fset c) = (l,r))">
      <goal name="algorithmA&#39;vc.4.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2220672"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="201334"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="algorithmA&#39;vc.4.1.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.09" steps="36789"/></proof>
       </goal>
       <goal name="algorithmA&#39;vc.4.1.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2166208"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="195873"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="compute_hyp_specified" proved="true" >
        <goal name="algorithmA&#39;vc.4.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.26" steps="51977"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="algorithmA&#39;vc.4.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2051223"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="187182"/></proof>
      <proof prover="4"><result status="valid" time="0.64" steps="1618"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="41933"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.30"/></proof>
 </goal>
 <goal name="case1_list" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2182725"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="136641"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_list.0" proved="true">
  <proof prover="2"><result status="valid" time="0.24" steps="44448"/></proof>
  </goal>
  <goal name="case1_list.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2782273"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125553"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(clauselist)">
   <goal name="case1_list.1.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_list.1.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_list.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.15" steps="39725"/></proof>
     </goal>
     <goal name="case1_list.1.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2779317"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119615"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_list.1.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2508696"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135216"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="subst" proved="true" arg1="clauselist">
       <goal name="case1_list.1.0.0.1.0.0" proved="true">
       <transf name="subst" proved="true" arg1="clause">
        <goal name="case1_list.1.0.0.1.0.0.0" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1722074"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125883"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_list.1.0.0.1.0.0.0.0" proved="true">
         <transf name="compile_match" proved="true" >
          <goal name="case1_list.1.0.0.1.0.0.0.0.0" proved="true">
          <transf name="eliminate_let" proved="true" >
           <goal name="case1_list.1.0.0.1.0.0.0.0.0.0" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst1">
             <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst2">
              <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
              <proof prover="2"><result status="valid" time="0.14" steps="38969"/></proof>
              </goal>
              <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="978037"/></proof>
              <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="144222"/></proof>
              <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <transf name="replace" proved="true" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
               <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0" proved="true">
               <transf name="replace" proved="true" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
                <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0" proved="true">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="990565"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="143682"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" proved="true" >
                 <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0" proved="true">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1005971"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="134581"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 <transf name="compile_match" proved="true" >
                  <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0" proved="true">
                  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1003960"/></proof>
                  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="142009"/></proof>
                  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                  <transf name="replace" proved="true" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                   <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
                   <proof prover="2"><result status="valid" time="0.67" steps="85675"/></proof>
                   </goal>
                   <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="0.73" steps="107798"/></proof>
                   <proof prover="4" obsolete="true"><result status="valid" time="0.67" steps="1334"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="timeout" time="1.00" steps="142212"/></proof>
                <proof prover="4"><result status="valid" time="0.02" steps="36"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="case1_list.1.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.75" steps="102678"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="36"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1591907"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="127043"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case2_list.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_list.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case2_list.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case2_list.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.15" steps="39912"/></proof>
     </goal>
     <goal name="case2_list.0.0.0.1">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2748357"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="141615"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case2_list.0.0.0.1.0">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2616066"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="153325"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" arg1="right">
       <goal name="case2_list.0.0.0.1.0.0">
       <proof prover="0"><result status="timeout" time="1.00" steps="2710073"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="132674"/></proof>
       <proof prover="4"><result status="timeout" time="1.00"/></proof>
       </goal>
       <goal name="case2_list.0.0.0.1.0.1" proved="true">
       <proof prover="2"><result status="valid" time="0.15" steps="40444"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="case1.0" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="60969"/></proof>
  </goal>
  <goal name="case1.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2178676"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="160860"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="replace" proved="true" arg1="(fset_from_list (convertToList phi))" arg2="(Cons (singleton ATop,p) Nil)">
   <goal name="case1.1.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1900403"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="138681"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(Cons (singleton ATop, p) (Nil: list (fset atomicformula, rightside)))">
    <goal name="case1.1.0.0" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
     <goal name="case1.1.0.0.0" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2009342"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="109910"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1.1.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="2"><result status="valid" time="0.16" steps="40107"/></proof>
      </goal>
      <goal name="case1.1.0.0.0.1" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1937483"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="116798"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="case1.1.0.0.0.1.0" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1574937"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="109775"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
        <goal name="case1.1.0.0.0.1.0.0" proved="true">
        <transf name="compile_match" proved="true" >
         <goal name="case1.1.0.0.0.1.0.0.0" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1645594"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119554"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="eliminate_let" proved="true" >
          <goal name="case1.1.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1672800"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="118674"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="eliminate_if" proved="true" >
           <goal name="case1.1.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst1">
            <goal name="case1.1.0.0.0.1.0.0.0.0.0.0" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst2">
             <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
             <proof prover="2"><result status="valid" time="0.16" steps="39396"/></proof>
             </goal>
             <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1" proved="true">
             <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="958445"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="133997"/></proof>
             <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
             <transf name="replace" proved="true" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
              <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0" proved="true">
              <transf name="replace" proved="true" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
               <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0" proved="true">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="970313"/></proof>
               <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="122405"/></proof>
               <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
               <transf name="compile_match" proved="true" >
                <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0" proved="true">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="979124"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="121697"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" proved="true" >
                 <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0" proved="true">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="980567"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131128"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 <transf name="replace" proved="true" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                  <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
                  <proof prover="2"><result status="valid" time="0.68" steps="91115"/></proof>
                  </goal>
                  <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="2"><result status="timeout" time="2.00" steps="325229"/></proof>
                  <proof prover="4"><result status="valid" time="0.73" steps="1751"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="timeout" time="1.00" steps="135286"/></proof>
               <proof prover="4"><result status="valid" time="0.02" steps="38"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.34" steps="175174"/></proof>
              <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="38"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="case1.1.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.21" steps="43571"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2556241"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="127690"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case2.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2219308"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="144169"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list (convertToList phi))">
   <goal name="case2.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case2.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case2.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="40274"/></proof>
     </goal>
     <goal name="case2.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2189460"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119796"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case2.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2273184"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135858"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case2.0.0.0.1.0.0" proved="true">
       <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7505025"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="132942"/></proof>
       <proof prover="4"><result status="valid" time="0.24" steps="1392"/></proof>
       </goal>
       <goal name="case2.0.0.0.1.0.1" proved="true">
       <proof prover="2"><result status="valid" time="0.15" steps="40806"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="1388"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_induction1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2248884"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125420"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" >
  <goal name="case_induction1.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list (convertToList phi))">
   <goal name="case_induction1.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case_induction1.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case_induction1.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="40445"/></proof>
     </goal>
     <goal name="case_induction1.0.0.0.1">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2697257"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131720"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case_induction1.0.0.0.1.0">
      <transf name="destruct" arg1="Hinst">
       <goal name="case_induction1.0.0.0.1.0.0">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330634"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="139229"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="assert" arg1="(convertRStoAF p &lt;&gt; ABot)">
        <goal name="case_induction1.0.0.0.1.0.1.0" expl="asserted formula">
        <proof prover="0"><result status="timeout" time="1.00" steps="2131094"/></proof>
        <proof prover="2"><undone/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="case_induction1.0.0.0.1.0.1.1">
        <proof prover="0"><result status="timeout" time="1.00" steps="2419976"/></proof>
        <proof prover="2"><undone/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="case_induction1.0.0.0.1.0.1">
       <proof prover="0"><result status="timeout" time="1.00" steps="2533345"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="150328"/></proof>
       <proof prover="4"><result status="timeout" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn_proof" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2374847"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="140490"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="horn_proof.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="phi">
   <goal name="horn_proof.0.0" proved="true">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="9447638"/></proof>
   <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="808652"/></proof>
   <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="x">
    <goal name="horn_proof.0.0.0" proved="true">
    <transf name="destruct_term" proved="true" arg1="x1">
     <goal name="horn_proof.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="39961"/></proof>
     </goal>
     <goal name="horn_proof.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="39957"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="horn_proof.0.0.1" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="39926"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="horn_proof.0.1" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2634554"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="146073"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="x">
    <goal name="horn_proof.0.1.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3070890"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158034"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct_term" proved="true" arg1="x1">
     <goal name="horn_proof.0.1.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="39951"/></proof>
     </goal>
     <goal name="horn_proof.0.1.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="40027"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="horn_proof.0.0.0">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2642238"/></proof>
    <proof prover="2"><undone/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
