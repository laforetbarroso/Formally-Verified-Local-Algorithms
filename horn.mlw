module TypeForm
  use booltheory.BoolImplementation

  type atomicformula =
    | ATop
    | ABot
    | AVar i
  
  function eval_atomicformula (phi: atomicformula) (f: i -> t) : t
  = match phi with
      | ATop -> top
      | ABot -> bot
      | AVar i -> f i
    end
end


module Horn
  use TypeForm

  use import formula.ConjunctiveNormalForm as CNF 
  use import formula.Horn as HornFormula
  use import list.Mem as ListMem
  use list.List, list.Append, list.Length
  
  use booltheory.BoolImplementation, int.Int, setstheory.BoolSet, setstheory.PropositionalFormulaSet, option.Option
 
  clone set.SetApp with type elt = atomicformula
  
  
  (* EVALS *)
  
  
  function eval_setconjunction (s: fset atomicformula) (f: i-> BoolImplementation.t) : BoolImplementation.t
  
  axiom eval_setconjunction_empty: forall f, s: fset atomicformula. is_empty s -> eval_setconjunction s f = top
 
  axiom eval_setconjunction_pick: forall f, s: fset atomicformula. not is_empty s -> forall x. mem x s ->
        eval_setconjunction s f = (eval_atomicformula x f) /*\ eval_setconjunction (remove x s) f 
        
  lemma eval_setconjunction_singleton: forall f, s: fset atomicformula. cardinal s = 1 -> 
      let x = pick s in eval_setconjunction s f = (eval_atomicformula x f)
   
   
  val function eq_pos (x y: atomicformula) : bool
    ensures { result <-> x = y }   
      
  let rec lemma eval_commutes_add (s: set) (x: atomicformula) (f: i -> t)
    variant { cardinal (add x s) }
    ensures { eval_setconjunction (add x s) f = eval_atomicformula x f /*\ eval_setconjunction s f }
  = if is_empty s then ()
    else let y = choose (add x s) in
      if eq_pos x y then ()
      else let new_s = remove y (add x s) in
        eval_commutes_add new_s x f
      
  lemma add_eval: forall f s x. 
  eval_setconjunction (add x s) f = eval_atomicformula x f /*\ eval_setconjunction s f
   
  

  function eval_list (l: list (set, rightside)) (f: i-> BoolImplementation.t) : BoolImplementation.t
  = match l with
      | Nil -> top
      | Cons (t,r) l1 -> ((eval_setconjunction t f) ->* (eval_rightside (assign_rightside r f))) /*\ eval_list l1 f
    end
  
  (* SYNTATIC CONVERTERS *)
  
  let function convertRStoAF (phi: rightside) : atomicformula
    ensures {forall f. eval_rightside (assign_rightside phi f) = eval_atomicformula result f}
    ensures { match phi with
                | RProp t -> if t = top then result = ATop else result = ABot
                | RVar x -> result = AVar x
              end}
  = match phi with
      | RProp t -> if t = top then ATop else (ABot)
      | RVar x -> AVar x
    end
    
  let function convertPLtoAF (phi: pliteral) : atomicformula
    ensures{ match phi with
              | LBottom -> result = ABot
              | LVar x -> result = AVar x
            end }
  = match phi with
      | LBottom -> ABot
      | LVar x -> AVar x
    end  
 
  let function convertAFtoPL (phi: atomicformula) : pliteral
    requires{ phi <> ATop }
    ensures{ match phi with
              | ATop -> false
              | ABot -> result = LBottom
              | AVar x -> result = LVar x
            end }
  = match phi with
      | ATop -> absurd
      | ABot -> LBottom
      | AVar x -> LVar x
    end
  
  
  (* LEMMAS *)
  
  (* lemma union_set: forall s:set. exists x:set, y:set. s = union x y *) 
       
  let rec lemma aux (s1: set) (s2: set) (f: i -> t)
   variant { cardinal s1 + cardinal s2 }
   ensures { eval_setconjunction (union s1 s2) f = eval_setconjunction s1 f /*\ eval_setconjunction s2 f }
  = match is_empty s1, is_empty s2 with
    | True, True -> ()
    | False, True -> ()
    | True, False -> ()
    | False, False -> let element = choose s1 in aux (remove element s1) s2 f;
    assert { union s1 s2 == add element (union (remove element s1) s2) };
    assert { eval_setconjunction s1 f = eval_atomicformula element f /*\ eval_setconjunction (remove element s1) f }
     (*let s1 = union y1 y2; s2 = union x1 x2 in aux y1 y2 f; aux x1 x2 f*)
   end 
  
 (* lemma union_eval: forall s1 s2 f. eval_setconjunction (union s1 s2) f = eval_setconjunction s1 f /*\ eval_setconjunction s2 f *)
  
  lemma union_eval_empty: forall s1 s2 f. s1 = empty /\ s2 = empty -> eval_setconjunction (union s1 s2) f = eval_setconjunction s1 f /*\ eval_setconjunction s2 f
  
  lemma union_eval_samesingleton: forall s1 s2 e f. s1 = singleton e /\ s2 = singleton e -> eval_setconjunction (union s1 s2) f = eval_setconjunction s1 f /*\ eval_setconjunction s2 f
    
  lemma union_eval_diffsingleton: forall s1 s2 e1 e2 f. e1 <> e2 /\ s1 = singleton e1 /\ s2 = singleton e2 -> eval_setconjunction (union s1 s2) f = eval_setconjunction s1 f /*\ eval_setconjunction s2 f

  lemma convertPLtoAF_evaluation: forall f phi. eval_pliteral phi f = eval_atomicformula (convertPLtoAF phi) f
    
  lemma convertAFtoPL_evaluation: forall f phi. phi <> ATop -> eval_atomicformula phi f = eval_pliteral (convertAFtoPL phi) f
    
  lemma PLtoAF_AFtoPL: forall x. x <> ATop -> x = convertPLtoAF (convertAFtoPL x)
    
  lemma add_then_mem: forall x ns. ns = add (convertPLtoAF x) empty -> mem (convertPLtoAF x) ns
  
  
  (* Implementation *)
  
  
  (* let rec function eval_setconjunction (s: set) (f: i-> BoolImplementation.t) : BoolImplementation.t
  variant { cardinal s }
  = if is_empty s then top
  else let x = choose s in
    (eval_atomicformula x f) /*\ eval_setconjunction (remove x s) f *)
    
    
  function numberOfHBasic (phi: hornclause) : int
  = match phi with
      | HBasic _ -> 1
      | HAnd e1 e2 -> numberOfHBasic e1 + numberOfHBasic e2  
     end
  
  predicate op_and (x: pliteral) (phi: conj_pliteral) 
  = match phi with
    | CPL y -> y = x
    | CPAnd w z -> op_and x w \/ op_and x z
   end
  
  
  let rec function convertConjunctionToSet (phi: conj_pliteral) : set
  (* ensures{ forall y. mem y result -> op_and (convertAFtoPL y) phi }
   ensures{ forall y. op_and y phi -> (mem (convertPLtoAF y) result) } *)
  = match phi with
      | CPL pl -> singleton (convertPLtoAF pl)
      | CPAnd c1 c2 -> union (convertConjunctionToSet c1) (convertConjunctionToSet c2)
    end
    
    
  let rec lemma convertConjunctionToSet_lemma (y: pliteral) (phi: conj_pliteral)
    ensures { op_and y phi -> (mem (convertPLtoAF y) (convertConjunctionToSet phi)) }
  = match phi with
      | CPL pl -> ()
      | CPAnd c1 c2 -> convertConjunctionToSet_lemma y c1; convertConjunctionToSet_lemma y c2
     end
     
  let rec lemma convertConjunctionToSet_lemma1 (y: atomicformula) (phi: conj_pliteral)
    ensures { mem y (convertConjunctionToSet phi) -> op_and (convertAFtoPL y) phi }
  = match phi with
      | CPL pl -> ()
      | CPAnd c1 c2 -> convertConjunctionToSet_lemma1 y c1; convertConjunctionToSet_lemma1 y c2
     end
    
  goal pp_same_p: forall x y f. HornFormula.eval_positive (CPAnd (CPL x) (CPL y)) f = eval_setconjunction (union (singleton (convertPLtoAF y)) (singleton (convertPLtoAF x))) f
    
  let rec lemma eval_equivalent (phi: conj_pliteral) (f: i -> t)
    variant { phi }
    ensures { let s = convertConjunctionToSet phi in HornFormula.eval_positive phi f = eval_setconjunction s f }
  = match phi with
      | CPL x -> () (* assert{ convertConjunctionToSet phi = singleton (convertPLtoAF x) } *)
      | CPAnd z w -> eval_equivalent z f; eval_equivalent w f
     end
   
    
  let rec function convertToSet (phi: leftside) : set
    ensures{ phi = LTop -> result = singleton ATop }
    ensures{ forall c. phi = LPos c -> result = convertConjunctionToSet c }
  = match phi with
      | LTop -> singleton ATop
      | LPos c -> convertConjunctionToSet c
    end  
    
    
  let rec function convertToList (phi: hornclause) : list (set, rightside)
    ensures{ forall l r. phi = HBasic (BImpl l r) -> ListMem.mem (convertToSet l, r) result }
    ensures{ length result = numberOfHBasic phi }
  = match phi with
      | HBasic (BImpl l r) -> Cons ((convertToSet l), r) Nil
      | HAnd e1 e2 -> (convertToList e1) ++ (convertToList e2)
    end
    
  
  let rec function algorithmA (listformula: list (set,rightside)) (newlist: list (set,rightside)) (s: set) : (rl: (list (set,rightside)), rt: set)
    (* ensures{ forall x. mem x rt -> is_reachable x listformula } *)
    ensures{ length newlist <= length rl }
    ensures{ cardinal s <= cardinal rt }
  = match listformula with
      | Nil -> (newlist, s)
      | Cons (l,r) lst -> let (new_list, new_set) = 
          if subset l s then (newlist  ,(add (convertRStoAF r) s)) 
            else (newlist ++ (Cons (l,r) Nil), s) in
              algorithmA lst new_list new_set
    end
    
  let rec function processHorn (phi: list (set, rightside)) (s: set) : BoolImplementation.t
    variant { cardinal s }
  = let (new_list, new_set) = (algorithmA phi Nil s) in
    if(mem ABot new_set) then bot else
      if(new_set == s) then top else
        processHorn new_list new_set
    
  let function horn (phi: hornclause) : BoolImplementation.t
  = processHorn (convertToList phi) (singleton ATop)
  
  
 
  
  (*
  goal convertSet_Top: convertToSet(     LTop     ) == add (ATop) empty
  goal convertSet_Bottom: convertToSet(     (LPos (CPL LBottom))     ) == add (ABot) empty
  goal convertSet_Variable: forall x. convertToSet(     (LPos (CPL (LVar x)))     ) == add (AVar x) empty
  goal convertSet_And_Bot_Bot: convertToSet(     (LPos (CPAnd (CPL LBottom) (CPL LBottom)))     ) == add (ABot) empty
  goal convertSet_And_X_Y: forall x y. convertToSet(     (LPos (CPAnd (CPL (LVar x)) (CPL (LVar y))))     ) == add (AVar x) (add (AVar y) empty)
  goal convertSet_And_X_X: forall x. convertToSet(     (LPos (CPAnd (CPL (LVar x)) (CPL (LVar x))))     ) == add (AVar x) empty
  goal convertSet_And_X_Y_Z: forall x y z. convertToSet(     (LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPL (LVar z))))     ) == add (AVar x) (add (AVar y) (add (AVar z) empty))
  goal convertSet_And_X_X_Y_Z: forall x y z. convertToSet(     (LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar x))) (CPAnd (CPL (LVar y)) (CPL (LVar z)))))     ) == add (AVar x) (add (AVar y) (add (AVar z) empty))
  goal convertSet_And_X_Y_W_Z: forall x y w z. convertToSet(     (LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPAnd (CPL (LVar w)) (CPL (LVar z)))))     ) == add (AVar x) (add (AVar y) (add (AVar z) (add (AVar w) empty)))
 *)
 (*
  goal convertList_Basic_Impl_Top_Bot: convertToList (HBasic (BImpl (LTop) (RProp bot))) = Cons ((singleton ATop), RProp bot) Nil
  goal convertList_Basic_Impl_Top_Var: forall x. convertToList (HBasic (BImpl (LTop) (RVar x))) = Cons ((add ATop empty), RVar x) Nil
  goal convertList_Basic_Impl_AndBotBot_Bot: convertToList (HBasic (BImpl ((LPos (CPAnd (CPL LBottom) (CPL LBottom)))) (RProp bot))) = Cons (union (add (ABot) empty) (add (ABot) empty ), RProp bot) Nil
  goal convertList_Basic_Impl_AndBotBot_Var: forall x. convertToList (HBasic (BImpl ((LPos (CPAnd (CPL LBottom) (CPL LBottom)))) (RVar x))) = Cons (union (add (ABot) empty) (add (ABot) empty ), RVar x) Nil
  goal convertList_Basic_Impl_AndXY_Bot: forall x y. convertToList (HBasic (BImpl ((LPos (CPAnd (CPL (LVar x)) (CPL (LVar y))))) (RProp bot))) = Cons (union (add (AVar x) empty) (add (AVar y) empty ), RProp bot) Nil
  goal convertList_Basic_Impl_AndXY_Top: forall x y. convertToList (HBasic (BImpl ((LPos (CPAnd (CPL (LVar x)) (CPL (LVar y))))) (RProp top))) = Cons (union (add (AVar x) empty) (add (AVar y) empty ), RProp top) Nil
  goal convertList_Basic_Impl_AndXX_Bot: forall x. convertToList (HBasic (BImpl ((LPos (CPAnd (CPL (LVar x)) (CPL (LVar x))))) (RProp bot))) = Cons (union (add (AVar x) empty) (add (AVar x) empty ), RProp bot) Nil
  goal convertList_Basic_Impl_AndXX_Top: forall x. convertToList (HBasic (BImpl ((LPos (CPAnd (CPL (LVar x)) (CPL (LVar x))))) (RProp top))) = Cons (union (add (AVar x) empty) (add (AVar x) empty ), RProp top) Nil
  goal convertList_Basic_Impl_AndXYZ_Bot: forall x y z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPL (LVar z))))) (RProp bot))) = Cons (union (union (add (AVar x) empty) (add (AVar y) empty)) (add (AVar z) empty ), RProp bot) Nil
  goal convertList_Basic_Impl_AndXYZ_Top: forall x y z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPL (LVar z))))) (RProp top))) = Cons (union (union (add (AVar x) empty) (add (AVar y) empty)) (add (AVar z) empty ), RProp top) Nil
  goal convertList_Basic_Impl_AndXXYZ_Bot: forall x y z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar x))) (CPAnd (CPL (LVar y)) (CPL (LVar z)))))) (RProp bot))) = Cons (union (union (add (AVar x) empty) (add (AVar x) empty)) (union (add (AVar y) empty) (add (AVar z) empty) ), RProp bot) Nil
  goal convertList_Basic_Impl_AndXXYZ_Top: forall x y z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar x))) (CPAnd (CPL (LVar y)) (CPL (LVar z)))))) (RProp top))) = Cons (union (union (add (AVar x) empty) (add (AVar x) empty)) (union (add (AVar y) empty) (add (AVar z) empty) ), RProp top) Nil
  goal convertList_Basic_Impl_AndXYWZ_Bot: forall x y w z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPAnd (CPL (LVar w)) (CPL (LVar z)))))) (RProp bot))) = Cons (union (union (add (AVar x) empty) (add (AVar y) empty)) (union (add (AVar w) empty) (add (AVar z) empty) ), RProp bot) Nil
  goal convertList_Basic_Impl_AndXYWZ_Top: forall x y w z. convertToList (HBasic (BImpl ((LPos (CPAnd (CPAnd (CPL (LVar x)) (CPL (LVar y))) (CPAnd (CPL (LVar w)) (CPL (LVar z)))))) (RProp top))) = Cons (union (union (add (AVar x) empty) (add (AVar y) empty)) (union (add (AVar w) empty) (add (AVar z) empty) ), RProp top) Nil
  *)

end

