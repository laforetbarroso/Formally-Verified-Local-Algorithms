<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals">
 <goal name="eval_setconjunction_singleton">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <proof prover="0"><result status="timeout" time="1.00" steps="501349"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2" timelimit="5"><result status="valid" time="0.13" steps="27361"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2" timelimit="5"><result status="valid" time="0.20" steps="36362"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2" timelimit="5"><result status="valid" time="0.18" steps="32013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <proof prover="2"><result status="valid" time="0.17" steps="30235"/></proof>
 </goal>
</theory>
<theory name="SAT">
 <goal name="if_unsat_then_not_sat">
 <proof prover="2"><result status="valid" time="0.13" steps="27727"/></proof>
 </goal>
 <goal name="top_is_satisfiable">
 <proof prover="0" timelimit="20"><result status="timeout" time="20.00" steps="1134437"/></proof>
 <proof prover="1" timelimit="20"><result status="timeout" time="20.00"/></proof>
 <proof prover="2" timelimit="20" obsolete="true"><result status="timeout" time="20.00" steps="7534501"/></proof>
 <transf name="split_vc" >
  <goal name="top_is_satisfiable.0">
  <proof prover="0"><result status="timeout" time="1.00" steps="779411"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="275956"/></proof>
  <transf name="unfold" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0">
   <proof prover="0"><result status="timeout" time="1.00" steps="778596"/></proof>
   <proof prover="1"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="275127"/></proof>
   <transf name="exists" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0">
    <proof prover="2"><result status="valid" time="0.10" steps="27449"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable">
 <proof prover="2"><result status="valid" time="0.14" steps="28308"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom">
 <proof prover="2"><result status="valid" time="0.11" steps="27191"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.16" steps="31267"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="29456"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.14" steps="29981"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS">
 <proof prover="0" timelimit="5" obsolete="true"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="2"><result status="valid" time="0.14" steps="30766"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="26182"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.15" steps="32041"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.32" steps="61833"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.12" steps="29600"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.22" steps="38544"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.16" steps="32335"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.19" steps="35370"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.63" steps="89910"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.24" steps="793"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="213761"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <transf name="destruct_term" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0">
   <proof prover="2"><result status="valid" time="0.07" steps="31168"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1">
   <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="133286"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="valid" time="0.15" steps="27011"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <transf name="destruct_term" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0">
   <proof prover="2"><result status="valid" time="0.07" steps="30656"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1">
   <proof prover="1"><result status="valid" time="0.02" steps="34"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="308384"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="26789"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.12" steps="32442"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma">
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.15" steps="34303"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.16" steps="34991"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="1" timelimit="5" obsolete="true"><result status="valid" time="2.07" steps="1725"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="760087"/></proof>
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition">
  <proof prover="1"><result status="valid" time="1.22" steps="1640"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="179614"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1833497"/></proof>
  <proof prover="1" obsolete="true"><result status="valid" time="1.20" steps="1417"/></proof>
  <proof prover="2"><result status="valid" time="0.18" steps="35251"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p">
 <proof prover="2"><result status="valid" time="0.28" steps="48794"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="773999"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="819320"/></proof>
 <transf name="split_vc" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="31746"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="31974"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.18" steps="36211"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="676830"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.19" steps="32515"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet">
 <proof prover="2"><result status="valid" time="0.16" steps="34310"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList">
 <proof prover="2"><result status="valid" time="0.15" steps="37257"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <transf name="split_vc" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.02" steps="42"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="82870"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2370592"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="196407"/></proof>
  <transf name="split_vc" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.29" steps="34657"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.29" steps="34730"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.02" steps="46"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="86408"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2356459"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="163592"/></proof>
  <transf name="split_vc" >
   <goal name="findFirst&#39;vc.2.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2348850"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="183875"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.2.0.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.30" steps="34195"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.29" steps="34295"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.02" steps="51"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="83779"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2709117"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="186349"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.2.1.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.39" steps="37014"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.39" steps="37586"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.03" steps="151"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="99810"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2027905"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="193027"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2478115"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="41414"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA_basic&#39;vc.0" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.40" steps="37508"/></proof>
  </goal>
  <goal name="algorithmA_basic&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2546172"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205089"/></proof>
  <transf name="unfold" arg1="if_subset_then_mem_result_clause">
   <goal name="algorithmA_basic&#39;vc.1.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="algorithmA_basic&#39;vc.1.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3013208"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="valid" time="0.52" steps="44038"/></proof>
    </goal>
    <goal name="algorithmA_basic&#39;vc.1.0.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2735908"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="182873"/></proof>
    <transf name="split_vc" >
     <goal name="algorithmA_basic&#39;vc.1.0.1.0" expl="postcondition">
     <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="10508432"/></proof>
     <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="valid" time="0.24" steps="35196"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA_basic&#39;vc.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3051540"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170338"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA_basic&#39;vc.2.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2870208"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170321"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA_basic&#39;vc.2.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2841461"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170216"/></proof>
    <transf name="unfold" arg1="algorithmA_basic">
     <goal name="algorithmA_basic&#39;vc.2.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3102045"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="2"><result status="valid" time="0.25" steps="35889"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA_basic&#39;vc.2.1" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.29" steps="34548"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <transf name="split_vc" >
  <goal name="algorithmA&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.18" steps="33765"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.02" steps="54"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="192414"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="precondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.04" steps="138"/></proof>
  <proof prover="2"><result status="valid" time="0.21" steps="41465"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="precondition">
  <proof prover="2"><result status="valid" time="0.15" steps="38039"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.4" expl="variant decrease">
  <proof prover="1" obsolete="true"><result status="valid" time="0.03" steps="52"/></proof>
  <proof prover="2"><result status="valid" time="0.09" steps="32632"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.5" expl="precondition">
  <proof prover="2"><result status="valid" time="0.10" steps="32993"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.6" expl="precondition">
  <proof prover="2"><result status="valid" time="0.10" steps="34519"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.7" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2047456"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="204071"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3276924"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131790"/></proof>
 <transf name="split_vc" >
  <goal name="horn&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3384837"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.09" steps="32188"/></proof>
  </goal>
  <goal name="horn&#39;vc.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2314502"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.43" steps="39823"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="A1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2973580"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="44205"/></proof>
 <transf name="split_vc" >
  <goal name="A1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2954919"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.50" steps="44750"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case1_with_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1263866"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="65841"/></proof>
 <transf name="split_vc" >
  <goal name="case1_with_basic.0">
  <proof prover="2"><result status="valid" time="0.52" steps="43888"/></proof>
  </goal>
  <goal name="case1_with_basic.1">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3131498"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.93" steps="65472"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case2_with_basic">
 <transf name="split_vc" >
  <goal name="case2_with_basic.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3131612"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125288"/></proof>
  <transf name="unfold" arg1="algorithmA_basic">
   <goal name="case2_with_basic.0.0">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2164919"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="122427"/></proof>
   <transf name="compile_match" >
    <goal name="case2_with_basic.0.0.0">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1862002"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="123027"/></proof>
    <transf name="eliminate_if" >
     <goal name="case2_with_basic.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1786950"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="127112"/></proof>
     <transf name="split_vc" >
      <goal name="case2_with_basic.0.0.0.0.0">
      <proof prover="0"><result status="timeout" time="1.00" steps="1800934"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="126935"/></proof>
      </goal>
      <goal name="case2_with_basic.0.0.0.0.1">
      <proof prover="2"><result status="valid" time="0.15" steps="38225"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1">
 </goal>
</theory>
</file>
</why3session>
