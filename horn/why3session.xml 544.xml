<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals">
 <goal name="eval_setconjunction_singleton">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <proof prover="0"><result status="timeout" time="1.00" steps="501349"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2" timelimit="5"><result status="valid" time="0.13" steps="27361"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2" timelimit="5"><result status="valid" time="0.20" steps="36362"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2" timelimit="5"><result status="valid" time="0.18" steps="32013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <proof prover="2"><result status="valid" time="0.17" steps="30235"/></proof>
 </goal>
</theory>
<theory name="Converts">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.15" steps="30327"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="28518"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.14" steps="29036"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS">
 <proof prover="2"><result status="valid" time="0.14" steps="29883"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.22" steps="725"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="147175"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <proof prover="0"><result status="timeout" time="1.00" steps="779434"/></proof>
 <proof prover="1" timelimit="5"><result status="valid" time="1.12" steps="1492"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479199"/></proof>
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <proof prover="0"><result status="timeout" time="1.00" steps="779599"/></proof>
  <proof prover="1" timelimit="5"><result status="valid" time="1.17" steps="1492"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <proof prover="0"><result status="timeout" time="1.00" steps="778628"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="279309"/></proof>
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="809168"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1471935"/></proof>
  <transf name="unfold" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0">
   <proof prover="0"><result status="timeout" time="1.00" steps="779249"/></proof>
   <proof prover="1"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="263414"/></proof>
   <transf name="compile_match" >
    <goal name="PLtoAF_AFtoPL.0.0.0">
    <proof prover="0"><result status="timeout" time="1.00" steps="778628"/></proof>
    <proof prover="1"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="263414"/></proof>
    <transf name="destruct_term" arg1="x">
     <goal name="PLtoAF_AFtoPL.0.0.0.0">
     <proof prover="2"><result status="valid" time="0.14" steps="29377"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.1">
     <proof prover="2"><result status="valid" time="0.14" steps="29256"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.2">
     <proof prover="2"><result status="valid" time="0.07" steps="25488"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SAT">
 <goal name="if_unsat_then_not_sat">
 <proof prover="2"><result status="valid" time="0.13" steps="27803"/></proof>
 </goal>
 <goal name="top_is_satisfiable">
 <proof prover="0" timelimit="20" obsolete="true"><result status="timeout" time="20.00" steps="1134437"/></proof>
 <proof prover="1" timelimit="20" obsolete="true"><result status="timeout" time="20.00"/></proof>
 <proof prover="2" timelimit="20" obsolete="true"><result status="timeout" time="20.00" steps="7534501"/></proof>
 <transf name="split_vc" >
  <goal name="top_is_satisfiable.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="779411"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275956"/></proof>
  <transf name="unfold" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="778596"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275127"/></proof>
   <transf name="exists" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0">
    <proof prover="2"><result status="valid" time="0.10" steps="27525"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable">
 <proof prover="2"><result status="valid" time="0.14" steps="28384"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom">
 <proof prover="2"><result status="valid" time="0.11" steps="27267"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="aux&#39;vc" expl="VC for aux">
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="28489"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.15" steps="34809"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.50" steps="67290"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.12" steps="32344"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.37" steps="42755"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.16" steps="35308"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.19" steps="38497"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.87" steps="89096"/></proof>
 </goal>
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.12" steps="34942"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma">
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.16" steps="36849"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.15" steps="37537"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="1" obsolete="true"><result status="valid" time="1.92" steps="2065"/></proof>
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition">
  <transf name="unfold" arg1="op_and">
   <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma1">
   <transf name="compile_match" >
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0" expl="VC for convertConjunctionToSet_lemma1">
    <transf name="split_vc" >
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0.0" expl="VC for convertConjunctionToSet_lemma1">
     <proof prover="1"><result status="valid" time="1.56" steps="1719"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="144513"/></proof>
     </goal>
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0.1" expl="VC for convertConjunctionToSet_lemma1">
     <proof prover="2"><result status="valid" time="0.14" steps="34286"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.19" steps="37829"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p">
 <proof prover="2"><result status="valid" time="0.45" steps="51740"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent">
 <transf name="split_vc" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="34292"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="34520"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.19" steps="38856"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.18" steps="35061"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet">
 <proof prover="2"><result status="valid" time="0.16" steps="36845"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList">
 <proof prover="2"><result status="valid" time="0.15" steps="40559"/></proof>
 </goal>
 <goal name="fset_from_list_distr">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2027446"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="184860"/></proof>
 <transf name="split_vc" >
  <goal name="fset_from_list_distr.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2098321"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="182837"/></proof>
  <transf name="induction_arg_ty_lex" arg1="left">
   <goal name="fset_from_list_distr.0.0">
   <transf name="split_vc" >
    <goal name="fset_from_list_distr.0.0.0">
    <proof prover="2"><result status="valid" time="0.15" steps="38489"/></proof>
    </goal>
    <goal name="fset_from_list_distr.0.0.1">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2688131"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="303347"/></proof>
    <transf name="compute_hyp_specified" >
     <goal name="fset_from_list_distr.0.0.1.0">
     <proof prover="2"><result status="valid" time="0.22" steps="44673"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <transf name="split_vc" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.03" steps="53"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="195700"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="2770417"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1174682"/></proof>
  <transf name="split_vc" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.14" steps="35491"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.14" steps="35564"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.02" steps="55"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="165630"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="6999074"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1288946"/></proof>
  <transf name="split_vc" >
   <goal name="findFirst&#39;vc.2.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2008413"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="163299"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.2.0.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.14" steps="35046"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.14" steps="35146"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.03" steps="60"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="159941"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2436453"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124560"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.2.1.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.18" steps="38059"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.18" steps="38653"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.03" steps="168"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="170065"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.2.2" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2244494"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205997"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.2.2.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.13" steps="35100"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.2.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.14" steps="35175"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.2.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.03" steps="165"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="177902"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="2911535"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="941258"/></proof>
  <transf name="split_vc" >
   <goal name="findFirst&#39;vc.3.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2035602"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="223378"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.3.0.0" expl="postcondition">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="6528840"/></proof>
    <proof prover="1"><result status="valid" time="0.05" steps="58"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="222399"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.3.0.1" expl="postcondition">
    <transf name="unfold" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.1.0" expl="postcondition">
     <transf name="compute_hyp_specified" >
      <goal name="findFirst&#39;vc.3.0.1.0.0" expl="postcondition">
      <proof prover="1" obsolete="true"><result status="valid" time="0.03" steps="198"/></proof>
      <proof prover="2"><result status="valid" time="0.24" steps="47214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.2" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2879495"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="130349"/></proof>
    <transf name="unfold" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.2.0" expl="postcondition">
     <transf name="compute_hyp_specified" >
      <goal name="findFirst&#39;vc.3.0.2.0.0" expl="postcondition">
      <proof prover="2"><result status="valid" time="0.27" steps="49777"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.3.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2042929"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="223486"/></proof>
   <transf name="split_vc" >
    <goal name="findFirst&#39;vc.3.1.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2200400"/></proof>
    <proof prover="1"><result status="valid" time="0.05" steps="58"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="222399"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.3.1.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2375071"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="116745"/></proof>
    <transf name="unfold" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.1.0" expl="postcondition">
     <transf name="compute_hyp_specified" >
      <goal name="findFirst&#39;vc.3.1.1.0.0" expl="postcondition">
      <proof prover="1" obsolete="true"><result status="valid" time="0.03" steps="198"/></proof>
      <proof prover="2"><result status="valid" time="0.22" steps="46040"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.2" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2565277"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131375"/></proof>
    <transf name="unfold" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.2.0" expl="postcondition">
     <transf name="compute_hyp_specified" >
      <goal name="findFirst&#39;vc.3.1.2.0.0" expl="postcondition">
      <proof prover="2"><result status="valid" time="0.27" steps="49818"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3397746"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="133683"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA_basic&#39;vc.0" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.18" steps="38369"/></proof>
  </goal>
  <goal name="algorithmA_basic&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2090313"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159941"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA_basic&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.24" steps="45008"/></proof>
   </goal>
   <goal name="algorithmA_basic&#39;vc.1.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2972452"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="175904"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA_basic&#39;vc.1.1.0" expl="postcondition">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="10693779"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2"><result status="valid" time="0.14" steps="35923"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2297700"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179104"/></proof>
 <transf name="split_vc" >
  <goal name="not_subset.0">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="2759217"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1210500"/></proof>
  <transf name="induction_arg_ty_lex" arg1="clauselist">
   <goal name="not_subset.0.0">
   <transf name="introduce_premises" >
    <goal name="not_subset.0.0.0">
    <transf name="split_vc" >
     <goal name="not_subset.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2407502"/></proof>
     <proof prover="1"><result status="valid" time="0.02" steps="52"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="200864"/></proof>
     </goal>
     <goal name="not_subset.0.0.0.1">
     <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="6955184"/></proof>
     <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1367952"/></proof>
     <transf name="unfold" arg1="if_subset_then_mem_result">
      <goal name="not_subset.0.0.0.1.0">
      <transf name="compile_match" >
       <goal name="not_subset.0.0.0.1.0.0">
       <proof prover="0"><result status="timeout" time="1.00" steps="2744154"/></proof>
       <proof prover="1"><result status="timeout" time="1.00"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="230597"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="13402351"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="726667"/></proof>
 <transf name="split_vc" >
  <goal name="subset.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1946199"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="183291"/></proof>
  <transf name="subst" arg1="clauselist">
   <goal name="subset.0.0">
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <transf name="split_vc" >
  <goal name="algorithmA&#39;vc.0" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.02" steps="63"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="232255"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="precondition">
  <proof prover="2"><result status="valid" time="0.14" steps="39225"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3032615"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="180593"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA&#39;vc.2.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.42" steps="74810"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3115259"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="181699"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.2.1.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.14" steps="36367"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.2.1.1" expl="postcondition">
    <proof prover="0"><result status="timeout" time="1.00" steps="2371789"/></proof>
    <proof prover="1"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="144975"/></proof>
    <transf name="unfold" arg1="if_subset_then_mem_result">
     <goal name="algorithmA&#39;vc.2.1.1.0" expl="VC for algorithmA">
     <proof prover="0"><result status="timeout" time="1.00" steps="2241223"/></proof>
     <proof prover="1"><result status="timeout" time="1.00"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="179390"/></proof>
     <transf name="split_vc" >
      <goal name="algorithmA&#39;vc.2.1.1.0.0" expl="VC for algorithmA">
      <proof prover="0"><result status="timeout" time="1.00" steps="2705800"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="169112"/></proof>
      </goal>
      <goal name="algorithmA&#39;vc.2.1.1.0.1" expl="VC for algorithmA">
      <proof prover="0"><result status="timeout" time="1.00" steps="2488304"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="157022"/></proof>
      </goal>
      <goal name="algorithmA&#39;vc.2.1.1.0.2" expl="VC for algorithmA">
      <proof prover="0"><result status="timeout" time="1.00" steps="2689447"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="165236"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2795023"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="186440"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA&#39;vc.3.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.13" steps="36520"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.3.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2719699"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="195464"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.3.1.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.14" steps="37093"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.3.1.1" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.27" steps="49428"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn">
 <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="40360"/></proof>
 <transf name="split_vc" >
  <goal name="horn&#39;vc.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="41327"/></proof>
  </goal>
  <goal name="horn&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="A1">
 <proof prover="2" obsolete="true"><result status="valid" time="0.26" steps="46689"/></proof>
 </goal>
 <goal name="case1_with_basic">
 <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="69962"/></proof>
 </goal>
 <goal name="case2_with_basic">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="6324675"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="762985"/></proof>
 <transf name="split_vc" >
  <goal name="case2_with_basic.0">
  <transf name="unfold" arg1="algorithmA_basic">
   <goal name="case2_with_basic.0.0">
   <transf name="compile_match" >
    <goal name="case2_with_basic.0.0.0">
    <transf name="eliminate_if" >
     <goal name="case2_with_basic.0.0.0.0">
     <transf name="split_vc" >
      <goal name="case2_with_basic.0.0.0.0.0">
      <transf name="destruct_term" arg1="c">
       <goal name="case2_with_basic.0.0.0.0.0.0">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1742380"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <proof prover="2" timelimit="5" obsolete="true"><result status="valid" time="1.06" steps="138280"/></proof>
       </goal>
       <goal name="case2_with_basic.0.0.0.0.0.1">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2255231"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <proof prover="2" timelimit="5" obsolete="true"><result status="valid" time="0.21" steps="43030"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="case2_with_basic.0.0.0.0.1">
      <proof prover="2" timelimit="5" obsolete="true"><result status="valid" time="0.15" steps="39654"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="if_subset">
 </goal>
</theory>
</file>
</why3session>
