<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="501349"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.13" steps="27361"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.20" steps="36362"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.18" steps="32013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="30235"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="27803"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0" timelimit="20" obsolete="true"><result status="timeout" time="20.00" steps="1134437"/></proof>
 <proof prover="1" timelimit="20" obsolete="true"><result status="timeout" time="20.00"/></proof>
 <proof prover="2" timelimit="20" obsolete="true"><result status="timeout" time="20.00" steps="7534501"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="779411"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275956"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="778596"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275127"/></proof>
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.10" steps="27525"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="28384"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="27267"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="31343"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29532"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="30057"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="30842"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="26238"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="32117"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="61909"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="29676"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="38620"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="32411"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="35446"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.63" steps="89976"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1"><result status="valid" time="0.24" steps="793"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="31244"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="36"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="27067"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="30732"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="34"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="26845"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.12" steps="32518"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="34379"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="35067"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.22" steps="1640"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18" steps="35327"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.28" steps="48865"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="31822"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="32050"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.18" steps="36287"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.19" steps="32591"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="34386"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="37333"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <transf name="split_vc" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="34733"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="34806"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.15" steps="34271"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="34371"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.0.2" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.19" steps="37090"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.19" steps="37662"/></proof>
    </goal>
    <goal name="findFirst&#39;vc.2.1.2" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.03" steps="151"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.00" steps="2350216"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="194147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="algorithmA_basic&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20" steps="37584"/></proof>
  </goal>
  <goal name="algorithmA_basic&#39;vc.1" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="if_subset_then_mem_result_clause">
   <goal name="algorithmA_basic&#39;vc.1.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="algorithmA_basic&#39;vc.1.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="44114"/></proof>
    </goal>
    <goal name="algorithmA_basic&#39;vc.1.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="algorithmA_basic&#39;vc.1.0.1.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.24" steps="35272"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA_basic&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA_basic&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="algorithmA_basic&#39;vc.2.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="algorithmA_basic">
     <goal name="algorithmA_basic&#39;vc.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.25" steps="35965"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA_basic&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="34624"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <transf name="split_vc" >
  <goal name="algorithmA&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18" steps="33821"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="54"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="41541"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="38115"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.4" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="32688"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="33049"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="34575"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.7" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.00" steps="3221009"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="188566"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="horn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="32244"/></proof>
  </goal>
  <goal name="horn&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="39899"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="A1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="A1.0" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="44831"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case1_with_basic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="case1_with_basic.0" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="43964"/></proof>
  </goal>
  <goal name="case1_with_basic.1" proved="true">
  <proof prover="2"><result status="valid" time="0.37" steps="65548"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case2_with_basic">
 </goal>
 <goal name="case1">
 <proof prover="0"><result status="timeout" time="1.00" steps="3219613"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="103772"/></proof>
 </goal>
</theory>
</file>
</why3session>
