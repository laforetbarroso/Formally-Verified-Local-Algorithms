<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="horn.mlw"/>
<theory name="Horn" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="1"><result status="timeout" time="5.00"/></proof>
 <proof prover="2"><result status="timeout" time="5.00" steps="2062254"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="502345"/></proof>
 <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="166129"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.13" steps="27273"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.18" steps="35995"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="858200"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="1"><result status="valid" time="0.18" steps="31961"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="422661"/></proof>
 <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="123335"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="add_eval.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="847177"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00" steps="599371"/></proof>
  <transf name="case" proved="true" arg1="(is_empty s)">
   <goal name="add_eval.0.0" expl="true case" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="29852"/></proof>
   </goal>
   <goal name="add_eval.0.1" expl="false case" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="432151"/></proof>
   <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.16" steps="31122"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="30244"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28589"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="29107"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="25441"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.20" steps="30927"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.46" steps="59537"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="28687"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24" steps="37212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="31030"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="34036"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.68" steps="91589"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1"><result status="valid" time="0.24" steps="657"/></proof>
 <proof prover="2"><result status="timeout" time="5.00" steps="1104043"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="29998"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="timeout" time="5.00" steps="781221"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.18" steps="26285"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="29491"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2"><result status="timeout" time="5.00" steps="1562658"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="26045"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="31518"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="33168"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="33839"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1833451"/></proof>
  <proof prover="1"><result status="valid" time="1.22" steps="1401"/></proof>
  <proof prover="2"><result status="timeout" time="5.00" steps="1066902"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2362324"/></proof>
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2"><result status="valid" time="0.11" steps="33696"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.28" steps="47415"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.90" steps="102950"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="30584"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="30806"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="2013718"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="0.18" steps="34931"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="24555354"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="0.15" steps="31358"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="33169"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="35511"/></proof>
 </goal>
 <goal name="findFirstWithCondition&#39;vc" expl="VC for findFirstWithCondition" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2652732"/></proof>
 <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1"><result status="valid" time="0.22" steps="41465"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="findFirstWithCondition&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2630703"/></proof>
  <proof prover="1" timelimit="1"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="197954"/></proof>
  </goal>
  <goal name="findFirstWithCondition&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1812612"/></proof>
  <proof prover="1" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" timelimit="1" obsolete="true"><result status="timeout" time="1.00" steps="256556"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirstWithCondition&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.11" steps="30554"/></proof>
   </goal>
   <goal name="findFirstWithCondition&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.11" steps="30627"/></proof>
   </goal>
   <goal name="findFirstWithCondition&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3209783"/></proof>
   <proof prover="1" timelimit="1"><result status="valid" time="0.02" steps="29"/></proof>
   <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="201682"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirstWithCondition&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="2042320"/></proof>
  <proof prover="1" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="157634"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirstWithCondition&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.17" steps="32664"/></proof>
   </goal>
   <goal name="findFirstWithCondition&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.16" steps="33231"/></proof>
   </goal>
   <goal name="findFirstWithCondition&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="1" timelimit="1"><result status="valid" time="0.03" steps="100"/></proof>
   <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="207665"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="14870885"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="1"><result status="valid" time="0.19" steps="40456"/></proof>
 </goal>
 <goal name="processHorn&#39;vc" expl="VC for processHorn">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.14" steps="32559"/></proof>
 </goal>
 <goal name="algorithmA_aux&#39;vc" expl="VC for algorithmA_aux">
 <proof prover="0"><result status="timeout" time="1.00" steps="2497610"/></proof>
 <proof prover="1" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="158404"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA_aux&#39;vc.0" expl="variant decrease">
  <proof prover="0"><result status="timeout" time="1.00" steps="2275387"/></proof>
  <proof prover="1" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" timelimit="1"><result status="timeout" time="1.00" steps="184704"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA_aux&#39;vc.0.0" expl="variant decrease">
   <proof prover="2" timelimit="1"><result status="valid" time="0.14" steps="33004"/></proof>
   </goal>
   <goal name="algorithmA_aux&#39;vc.0.1" expl="variant decrease">
   <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="7167346"/></proof>
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="timeout" time="5.00" steps="1045387"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA_aux&#39;vc.1" expl="precondition">
  <proof prover="2" timelimit="1"><result status="valid" time="0.07" steps="27732"/></proof>
  </goal>
  <goal name="algorithmA_aux&#39;vc.2" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="2"><result status="timeout" time="5.00" steps="914799"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertSet_And_X_Y">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.21" steps="37795"/></proof>
 </goal>
 <goal name="convertSet_And_X_Y_W_Z">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.67" steps="88234"/></proof>
 </goal>
 <goal name="convertSet_And_X_X_Y_Z">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.74" steps="102655"/></proof>
 </goal>
 <goal name="convertSet_And_X_Y_Z">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.51" steps="74707"/></proof>
 </goal>
 <goal name="convertSet_Top">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.15" steps="32258"/></proof>
 </goal>
 <goal name="convertSet_And_Bot_Bot">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.18" steps="35428"/></proof>
 </goal>
 <goal name="convertSet_And_X_X">
 <proof prover="2" timelimit="1" obsolete="true"><result status="valid" time="0.20" steps="36446"/></proof>
 </goal>
</theory>
</file>
</why3session>
