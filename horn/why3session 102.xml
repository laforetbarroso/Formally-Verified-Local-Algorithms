<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals">
 <goal name="eval_setconjunction_singleton">
 <proof prover="0" obsolete="true"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="323677"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="500474"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="161508"/></proof>
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="27273"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.20" steps="35995"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="31961"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="30209"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="30543"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28734"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="29252"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="25556"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="31072"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="60309"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="28832"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="37269"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="31168"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="34180"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.63" steps="91625"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1"><result status="valid" time="0.24" steps="664"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="144885"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0" proved="true">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="valid" time="0.15" steps="30143"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="26"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="143819"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="26403"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <transf name="destruct_term" proved="true" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="29636"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="271497"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.07" steps="26163"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.12" steps="31656"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="33306"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.15" steps="33977"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <proof prover="1" timelimit="5" obsolete="true"><result status="valid" time="2.07" steps="1725"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="760087"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1833497"/></proof>
  <proof prover="1"><result status="valid" time="1.20" steps="1417"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="160175"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1" obsolete="true"><result status="valid" time="1.22" steps="1401"/></proof>
  <proof prover="2"><result status="valid" time="0.18" steps="34096"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.28" steps="47463"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="773999"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="819320"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="30729"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="30955"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="676830"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.19" steps="35039"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.18" steps="31507"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="33314"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="36159"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst" proved="true">
 <proof prover="2"><result status="valid" time="0.22" steps="42358"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="41300"/></proof>
 </goal>
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="32738"/></proof>
 </goal>
 <goal name="singleton" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="28731"/></proof>
 </goal>
 <goal name="satisf" proved="true">
 <proof prover="2"><result status="valid" time="0.23" steps="40704"/></proof>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2744031"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="valid" time="0.15" steps="33371"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2632524"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="valid" time="0.12" steps="31826"/></proof>
 </goal>
 <goal name="case1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3138308"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="137336"/></proof>
 <transf name="split_vc" >
  <goal name="case1.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3093707"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.14" steps="31877"/></proof>
  </goal>
  <goal name="case1.1">
  <proof prover="0"><result status="timeout" time="1.00" steps="3388065"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="149068"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_setconjunction_singleton">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
 <goal name="f2_1">
 <proof prover="0"><result status="timeout" time="1.00" steps="3403622"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="158458"/></proof>
 <transf name="split_vc" >
  <goal name="f2_1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2890814"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="f2_2">
 <proof prover="0"><result status="timeout" time="1.00" steps="2855002"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="140637"/></proof>
 <transf name="split_vc" >
  <goal name="f2_2.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2314502"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="f1">
 <proof prover="0"><result status="timeout" time="1.00" steps="3313387"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="158295"/></proof>
 <transf name="split_vc" >
  <goal name="f1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2888586"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <transf name="split_vc" >
  <goal name="add_eval.0">
  <transf name="case" arg1="(is_empty s)">
   <goal name="add_eval.0.0" expl="true case">
   <proof prover="2"><undone/></proof>
   </goal>
   <goal name="add_eval.0.1" expl="false case">
   <proof prover="2"><undone/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Converters">
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.13" steps="31625"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <proof prover="0"><result status="timeout" time="1.00" steps="508207"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="127213"/></proof>
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="25541"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.16" steps="31041"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.32" steps="59624"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.11" steps="28801"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.21" steps="37291"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.22" steps="657"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="133523"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.18" steps="34150"/></proof>
 </goal>
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.16" steps="30358"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <proof prover="0"><result status="timeout" time="1.00" steps="780177"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="135224"/></proof>
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <proof prover="1"><result status="valid" time="0.97" steps="1364"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="134930"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.63" steps="91703"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="28703"/></proof>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="822229"/></proof>
 <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1579942"/></proof>
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="814758"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1533348"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.13" steps="29221"/></proof>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.15" steps="31144"/></proof>
 </goal>
</theory>
</file>
</why3session>
