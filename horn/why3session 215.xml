<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="501349"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.13" steps="27361"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.20" steps="36362"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.18" steps="32013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="30235"/></proof>
 </goal>
</theory>
<theory name="SAT">
 <goal name="if_unsat_then_not_sat">
 </goal>
 <goal name="satisf">
 </goal>
 <goal name="top_is_satisfiable">
 </goal>
 <goal name="bot_is_unsatisfiable">
 </goal>
 <goal name="if_satisf_then_not_bottom">
 </goal>
</theory>
<theory name="Horn">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="30441"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="28632"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="29150"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS">
 <proof prover="0" timelimit="5" obsolete="true"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="29997"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.07" steps="25653"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="31319"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="60866"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="29010"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="37692"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="31485"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2" obsolete="true"><result status="valid" time="0.19" steps="34515"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2" obsolete="true"><result status="valid" time="0.63" steps="94703"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1" obsolete="true"><result status="valid" time="0.24" steps="725"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="147966"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <transf name="destruct_term" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0">
   <proof prover="2" obsolete="true"><result status="valid" time="0.07" steps="30459"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="30"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="145796"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="26500"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <transf name="destruct_term" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0">
   <proof prover="2" obsolete="true"><result status="valid" time="0.07" steps="29933"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="28"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="261919"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="26260"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem">
 <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="31834"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma">
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="33578"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="34250"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="1" timelimit="5" obsolete="true"><result status="valid" time="2.07" steps="1725"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="760087"/></proof>
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="1.22" steps="1531"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159292"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1833497"/></proof>
  <proof prover="1" obsolete="true"><result status="valid" time="1.20" steps="1417"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="34386"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p">
 <proof prover="2" obsolete="true"><result status="valid" time="0.28" steps="47828"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="773999"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="819320"/></proof>
 <transf name="split_vc" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="31002"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="31228"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="35366"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="676830"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.19" steps="31781"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet">
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="33587"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList">
 <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="36433"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="43229"/></proof>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2478115"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="41414"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA_basic&#39;vc.0" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="36076"/></proof>
  </goal>
  <goal name="algorithmA_basic&#39;vc.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2546172"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205089"/></proof>
  <transf name="unfold" arg1="if_subset_then_mem_result_clause">
   <goal name="algorithmA_basic&#39;vc.1.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="algorithmA_basic&#39;vc.1.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2932582"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="valid" time="0.26" steps="42186"/></proof>
    </goal>
    <goal name="algorithmA_basic&#39;vc.1.0.1" expl="postcondition">
    <proof prover="2" obsolete="true"><result status="valid" time="0.08" steps="34002"/></proof>
    </goal>
    <goal name="algorithmA_basic&#39;vc.1.0.0" expl="VC for algorithmA_basic">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="9337031"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA_basic&#39;vc.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3051540"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170338"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA_basic&#39;vc.2.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="33742"/></proof>
   </goal>
   <goal name="algorithmA_basic&#39;vc.2.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2870208"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170321"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA_basic&#39;vc.2.1.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2841461"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="170216"/></proof>
    <transf name="unfold" arg1="algorithmA_basic">
     <goal name="algorithmA_basic&#39;vc.2.1.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3102045"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="34363"/></proof>
     <transf name="subst" arg1="clause">
      <goal name="algorithmA_basic&#39;vc.2.0.0.0.0" expl="postcondition">
      <proof prover="0"><result status="timeout" time="1.00" steps="3092576"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="149246"/></proof>
      <transf name="compile_match" >
       <goal name="algorithmA_basic&#39;vc.2.0.0.0.0.0" expl="postcondition">
       <proof prover="0"><result status="timeout" time="1.00" steps="2594956"/></proof>
       <proof prover="1"><result status="timeout" time="1.00"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="149073"/></proof>
       <transf name="split_vc" >
        <goal name="algorithmA_basic&#39;vc.2.0.0.0.0.0.0" expl="postcondition">
        <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="10922489"/></proof>
        <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
        <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="809760"/></proof>
        <transf name="eliminate_if" >
         <goal name="algorithmA_basic&#39;vc.2.0.0.0.0.0.0.0" expl="VC for algorithmA_basic">
         <proof prover="0"><result status="timeout" time="1.00" steps="2484141"/></proof>
         <proof prover="1"><result status="timeout" time="1.00"/></proof>
         <proof prover="2"><result status="timeout" time="1.00" steps="187297"/></proof>
         <transf name="split_vc" >
          <goal name="algorithmA_basic&#39;vc.2.0.0.0.0.0.0.0.0" expl="postcondition">
          <proof prover="0"><result status="timeout" time="1.00" steps="2005963"/></proof>
          <proof prover="1"><result status="timeout" time="1.00"/></proof>
          <proof prover="2"><undone/></proof>
          </goal>
          <goal name="algorithmA_basic&#39;vc.2.0.0.0.0.0.0.0.1" expl="postcondition">
          <proof prover="2"><undone/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2221526"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="126486"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA&#39;vc.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="33594"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="variant decrease">
  <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="175"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="181269"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="precondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.04" steps="124"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="149154"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="37928"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.4" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="32597"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.5" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="32958"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.6" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="34478"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.7" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2047456"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="204071"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA&#39;vc.7.0" expl="postcondition">
   <transf name="subst" arg1="listformula">
    <goal name="algorithmA&#39;vc.7.0.0" expl="postcondition">
    <transf name="unfold" arg1="if_subset_then_mem_result">
     <goal name="algorithmA&#39;vc.7.0.0.0" expl="VC for algorithmA">
     <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="31243"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.7.1" expl="postcondition">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7558337"/></proof>
   <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="941705"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.7.1.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3591795"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="199983"/></proof>
    <transf name="unfold" arg1="if_subset_then_mem_result">
     <goal name="algorithmA&#39;vc.7.1.0.0" expl="VC for algorithmA">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2057265"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="173917"/></proof>
     <transf name="unfold" arg1="if_subset_then_mem_result_clause">
      <goal name="algorithmA&#39;vc.7.1.0.0.0" expl="VC for algorithmA">
      <transf name="compile_match" >
       <goal name="algorithmA&#39;vc.7.1.0.0.0.0" expl="VC for algorithmA">
       <transf name="eliminate_if" >
        <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0" expl="VC for algorithmA">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2068533"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165709"/></proof>
        <transf name="split_vc" >
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.0" expl="VC for algorithmA">
         <proof prover="2" obsolete="true"><result status="valid" time="0.09" steps="32689"/></proof>
         </goal>
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.1" expl="VC for algorithmA">
         <proof prover="1" obsolete="true"><result status="valid" time="0.03" steps="125"/></proof>
         <proof prover="2" obsolete="true"><result status="valid" time="0.24" steps="42628"/></proof>
         </goal>
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.2" expl="VC for algorithmA">
         <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="32097"/></proof>
         </goal>
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.3" expl="VC for algorithmA">
         <proof prover="1" obsolete="true"><result status="valid" time="0.04" steps="125"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="177739"/></proof>
         </goal>
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4" expl="VC for algorithmA">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2091779"/></proof>
         <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="182539"/></proof>
         <transf name="unfold" arg1="if_subset_then_mem_result">
          <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0" expl="VC for algorithmA">
          <transf name="compile_match" >
           <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0" expl="VC for algorithmA">
           <transf name="split_vc" >
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.0" expl="VC for algorithmA">
            <proof prover="1" obsolete="true"><result status="valid" time="0.08" steps="137"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="193194"/></proof>
            </goal>
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.1" expl="VC for algorithmA">
            <proof prover="1" obsolete="true"><result status="valid" time="0.08" steps="144"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="185645"/></proof>
            </goal>
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.2" expl="VC for algorithmA">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2829278"/></proof>
            <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="175879"/></proof>
            <transf name="unfold" arg1="if_subset_then_mem_result">
             <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.2.0" expl="VC for algorithmA">
             <transf name="compile_match" >
              <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.2.0.0" expl="VC for algorithmA">
              <transf name="destruct_term" arg1="w">
               <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.2.0.0.0" expl="VC for algorithmA">
               <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="53840"/></proof>
               </goal>
               <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.2.0.0.1" expl="VC for algorithmA">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2596143"/></proof>
               <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
               <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="53927"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.4.0.0.3" expl="VC for algorithmA">
            <proof prover="1" obsolete="true"><result status="valid" time="0.09" steps="153"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="183538"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5" expl="VC for algorithmA">
         <transf name="subst" arg1="result">
          <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0" expl="VC for algorithmA">
          <transf name="destruct_term" arg1="w">
           <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0" expl="VC for algorithmA">
           <transf name="replace" arg1="w" arg2="Nil">
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0.0" expl="VC for algorithmA">
            <transf name="unfold" arg1="if_subset_then_mem_result">
             <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0.0.0" expl="VC for algorithmA">
             <transf name="compile_match" >
              <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0.0.0.0" expl="VC for algorithmA">
              <transf name="unfold" arg1="if_subset_then_mem_result_clause">
               <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0.0.0.0.0" expl="VC for algorithmA">
               <proof prover="2" obsolete="true"><result status="valid" time="0.29" steps="52648"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.0.1" expl="equality hypothesis">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2090855"/></proof>
            <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="178629"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="algorithmA&#39;vc.7.1.0.0.0.0.0.5.0.1" expl="VC for algorithmA">
           <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2551006"/></proof>
           <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179778"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="algorithmA&#39;vc.7.1.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2384551"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="149575"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.7.2" expl="postcondition">
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.7.2.0" expl="postcondition">
    <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="31671"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.7.2.1" expl="postcondition">
    <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="32041"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3276924"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131790"/></proof>
 <transf name="split_vc" >
  <goal name="horn&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3520797"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="192668"/></proof>
  </goal>
  <goal name="horn&#39;vc.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2314502"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.19" steps="39361"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="A1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2973580"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.26" steps="46223"/></proof>
 <transf name="split_vc" >
  <goal name="A1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2954919"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.26" steps="47576"/></proof>
  <transf name="assert" arg1="(algorithmA_basic (mk (singleton1 ATop), RProp top1)(mk (singleton1 ATop)) = (mk (singleton1 ATop)))">
   <goal name="A1.0.0" expl="asserted formula">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2181244"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="188206"/></proof>
   <transf name="instantiate" arg1="algorithmA_basic&#39;spec" arg2="(mk (singleton1 ATop), RProp top1)">
    <goal name="A1.0.0.0" expl="asserted formula">
    <transf name="instantiate" arg1="Hinst" arg2="(mk (singleton1 ATop))">
     <goal name="A1.0.0.0.0" expl="asserted formula">
     <transf name="destruct" arg1="Hinst">
      <goal name="A1.0.0.0.0.0" expl="destruct premise">
      <proof prover="2"><undone/></proof>
      </goal>
      <goal name="A1.0.0.0.0.1" expl="asserted formula">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2718217"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135745"/></proof>
      <transf name="unfold" arg1="if_subset_then_mem_result_clause" arg2="in" arg3="Hinst">
       <goal name="A1.0.0.0.0.1.0" expl="asserted formula">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3005368"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159630"/></proof>
       <transf name="compile_match" >
        <goal name="A1.0.0.0.0.1.0.0" expl="asserted formula">
        <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="12368922"/></proof>
        <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="808621"/></proof>
        <transf name="destruct" arg1="Hinst">
         <goal name="A1.0.0.0.0.1.0.0.0" expl="asserted formula">
         <proof prover="0"><result status="timeout" time="1.00" steps="2017244"/></proof>
         <proof prover="1"><result status="timeout" time="1.00"/></proof>
         <proof prover="2"><undone/></proof>
         </goal>
         <goal name="A1.0.0.0.0.1.0.0.0" expl="asserted formula">
         <proof prover="0"><result status="timeout" time="1.00" steps="2655652"/></proof>
         <proof prover="1"><result status="timeout" time="1.00"/></proof>
         <proof prover="2"><undone/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="A1.0.1">
   <proof prover="2"><undone/></proof>
   </goal>
  </transf>
  <transf name="assert" arg1="(not mem ABot (algorithmA_basic (mk (singleton1 ATop), RProp top1) (mk (singleton1 ATop))))">
   <goal name="A1.0.0" expl="asserted formula">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3287452"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><undone/></proof>
   </goal>
   <goal name="A1.0.1">
   <proof prover="2"><undone/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1_with_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3107226"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="121549"/></proof>
 <transf name="split_vc" >
  <goal name="case1_with_basic.0">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="35337"/></proof>
  </goal>
  <goal name="case1_with_basic.1">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3131498"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="55647"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case2_with_basic">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="4602036"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="727324"/></proof>
 <transf name="split_vc" >
  <goal name="case2_with_basic.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2512266"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="114843"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3450306"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="137292"/></proof>
 <transf name="split_vc" >
  <goal name="case1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3093707"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="35721"/></proof>
  </goal>
  <goal name="case1.1">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="4078824"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="114494"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable">
 <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="36823"/></proof>
 </goal>
 <goal name="top_is_satisfiable">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2209339"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="194865"/></proof>
 <transf name="split_vc" >
  <goal name="top_is_satisfiable.0">
  <transf name="unfold" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0">
   <transf name="exists" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0">
    <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="35414"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="satisf">
 <proof prover="2" obsolete="true"><result status="valid" time="0.23" steps="45000"/></proof>
 </goal>
 <goal name="check1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3313387"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="36102"/></proof>
 <transf name="split_vc" >
  <goal name="check1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2888586"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.21" steps="37137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="if_unsat_then_not_sat">
 <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="36044"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2632524"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="35158"/></proof>
 </goal>
 <goal name="singleton">
 <proof prover="2"><result status="valid" time="0.15" steps="31714"/></proof>
 </goal>
 <goal name="A0">
 <proof prover="0"><result status="timeout" time="1.00" steps="3222196"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Test">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.16" steps="30600"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="28791"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.14" steps="29309"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS">
 <proof prover="2"><result status="valid" time="0.14" steps="30156"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="962394"/></proof>
 <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="889026"/></proof>
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="25798"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.15" steps="31478"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.33" steps="61025"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.12" steps="29169"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.24" steps="37851"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.16" steps="31644"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.18" steps="34674"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.64" steps="94877"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.21" steps="725"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="148418"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <proof prover="1"><result status="valid" time="0.96" steps="1492"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="139855"/></proof>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="819710"/></proof>
 <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1492986"/></proof>
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="818705"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1543650"/></proof>
  <transf name="destruct_term" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0">
   <proof prover="2"><result status="valid" time="0.14" steps="30092"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1">
   <proof prover="1"><result status="valid" time="0.02" steps="28"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="262124"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2">
   <proof prover="1"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="valid" time="0.07" steps="26405"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.12" steps="31993"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma">
 <proof prover="2"><result status="valid" time="0.16" steps="34784"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="0"><result status="timeout" time="1.00" steps="2152123"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="196722"/></proof>
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.00" steps="1851680"/></proof>
  <proof prover="1" timelimit="5"><result status="valid" time="1.25" steps="1531"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1067176"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.18" steps="34545"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p">
 <proof prover="2"><result status="valid" time="0.28" steps="47992"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent">
 <proof prover="2"><result status="valid" time="0.88" steps="112372"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet">
 <proof prover="2"><result status="valid" time="0.16" steps="33746"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList">
 <proof prover="2"><result status="valid" time="0.17" steps="36592"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <proof prover="2"><result status="valid" time="0.23" steps="43388"/></proof>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic">
 <proof prover="2"><result status="valid" time="0.18" steps="38114"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <proof prover="0"><result status="timeout" time="1.00" steps="2591333"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="119990"/></proof>
 <transf name="split_vc" >
  <goal name="algorithmA&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.08" steps="32953"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.02" steps="172"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="190086"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="precondition">
  <proof prover="2"><result status="valid" time="0.13" steps="37175"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3333895"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="185531"/></proof>
  <transf name="split_vc" >
   <goal name="algorithmA&#39;vc.3.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2943734"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191698"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.3.0.0" expl="postcondition">
    <proof prover="2"><result status="valid" time="0.08" steps="30447"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.3.0.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2796384"/></proof>
    <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="186770"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.3.0.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="90006"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.3.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.02" steps="34"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="89694"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.3.2" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.14" steps="276"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="81244"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.3.3" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3250434"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187823"/></proof>
   <transf name="split_vc" >
    <goal name="algorithmA&#39;vc.3.3.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3050574"/></proof>
    <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="74714"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.3.3.1" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.05" steps="39"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="77412"/></proof>
    </goal>
    <goal name="algorithmA&#39;vc.3.3.2" expl="postcondition">
    <proof prover="0"><result status="timeout" time="1.00" steps="1512409"/></proof>
    <proof prover="1"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="69865"/></proof>
    <transf name="split_vc" >
     <goal name="algorithmA&#39;vc.3.3.2.0" expl="postcondition">
     <proof prover="1"><result status="valid" time="0.05" steps="43"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="76642"/></proof>
     </goal>
     <goal name="algorithmA&#39;vc.3.3.2.1" expl="postcondition">
     <proof prover="0"><result status="timeout" time="1.00" steps="1473618"/></proof>
     <proof prover="1"><result status="timeout" time="1.00"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="86880"/></proof>
     <transf name="split_vc" >
      <goal name="algorithmA&#39;vc.3.3.2.1.0" expl="postcondition">
      <proof prover="0"><result status="timeout" time="1.00" steps="3189620"/></proof>
      <proof prover="1"><result status="timeout" time="1.00"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="183966"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_clause_basic">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2701413"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="1.22" steps="80419"/></proof>
 <transf name="split_vc" >
  <goal name="case_clause_basic.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2679290"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="1.20" steps="82651"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="case_clause">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1596812"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" timelimit="5"><result status="valid" time="1.26" steps="85909"/></proof>
 </goal>
 <goal name="case_induction">
 <proof prover="0"><result status="timeout" time="1.00" steps="3071826"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="155405"/></proof>
 <transf name="split_vc" >
  <goal name="case_induction.0">
  <proof prover="0"><result status="timeout" time="1.00" steps="1707407"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="86066"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
