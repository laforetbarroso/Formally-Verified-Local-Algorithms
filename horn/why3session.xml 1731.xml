<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="horn.mlw"/>
<theory name="Evals">
 <goal name="eval_setconjunction_singleton">
 <proof prover="0"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323677"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <proof prover="0"><result status="timeout" time="1.00" steps="500474"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="161508"/></proof>
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.13" steps="27273"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.20" steps="35995"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.18" steps="31961"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <proof prover="2"><result status="valid" time="0.17" steps="30209"/></proof>
 </goal>
</theory>
<theory name="Converters">
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.13" steps="31625"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <proof prover="0"><result status="timeout" time="1.00" steps="508207"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="127213"/></proof>
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="25541"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.16" steps="31041"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.32" steps="59624"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.11" steps="28801"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.21" steps="37291"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.22" steps="657"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="133523"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.18" steps="34150"/></proof>
 </goal>
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.16" steps="30358"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <proof prover="0"><result status="timeout" time="1.00" steps="780177"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="135224"/></proof>
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <proof prover="1"><result status="valid" time="0.97" steps="1364"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="134930"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.63" steps="91703"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="28703"/></proof>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="822229"/></proof>
 <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1579942"/></proof>
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="814758"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1533348"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.13" steps="29221"/></proof>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.15" steps="31144"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="2"><result status="valid" time="0.16" steps="30472"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF">
 <proof prover="2"><result status="valid" time="0.13" steps="28817"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL">
 <proof prover="2"><result status="valid" time="0.14" steps="29335"/></proof>
 </goal>
 <goal name="aux&#39;vc" expl="VC for aux">
 <transf name="split_vc" >
  <goal name="aux&#39;vc.0" expl="precondition">
  <proof prover="2"><result status="valid" time="0.07" steps="25641"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.15" steps="31155"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion">
  <proof prover="2"><result status="valid" time="0.32" steps="59738"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion">
  <proof prover="2"><result status="valid" time="0.12" steps="28915"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition">
  <proof prover="2"><result status="valid" time="0.22" steps="37405"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty">
 <proof prover="2"><result status="valid" time="0.16" steps="31258"/></proof>
 </goal>
 <goal name="union_eval_samesingleton">
 <proof prover="2"><result status="valid" time="0.19" steps="34264"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton">
 <proof prover="2"><result status="valid" time="0.63" steps="91817"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation">
 <proof prover="1"><result status="valid" time="0.24" steps="657"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="132478"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation">
 <transf name="split_vc" >
  <goal name="convertAFtoPL_evaluation.0">
  <transf name="destruct_term" arg1="phi">
   <goal name="convertAFtoPL_evaluation.0.0">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="valid" time="0.15" steps="30226"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.1">
   <proof prover="1"><result status="valid" time="0.02" steps="24"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="144071"/></proof>
   </goal>
   <goal name="convertAFtoPL_evaluation.0.2">
   <proof prover="2"><result status="valid" time="0.07" steps="26491"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <transf name="destruct_term" arg1="x">
   <goal name="PLtoAF_AFtoPL.0.0">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="29719"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.1">
   <proof prover="1"><result status="valid" time="0.02" steps="22"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="269464"/></proof>
   </goal>
   <goal name="PLtoAF_AFtoPL.0.2">
   <proof prover="2"><result status="valid" time="0.07" steps="26251"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="add_then_mem">
 <proof prover="2"><result status="valid" time="0.12" steps="31732"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma">
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.0.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.16" steps="33382"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertConjunctionToSet_lemma&#39;vc.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="convertConjunctionToSet_lemma&#39;vc.1.0" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.15" steps="34053"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="1" timelimit="5" obsolete="true"><result status="valid" time="2.07" steps="1725"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="760087"/></proof>
 <transf name="split_vc" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1833497"/></proof>
  <proof prover="1"><result status="valid" time="1.20" steps="1401"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="228287"/></proof>
  </goal>
  <goal name="convertConjunctionToSet_lemma1&#39;vc.1" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="1.22" steps="1401"/></proof>
  <proof prover="2"><result status="valid" time="0.18" steps="33924"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pp_same_p">
 <proof prover="2"><result status="valid" time="0.28" steps="47592"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="773999"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="819320"/></proof>
 <transf name="split_vc" >
  <goal name="eval_equivalent&#39;vc.0" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="30812"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.1" expl="variant decrease">
  <proof prover="2"><result status="valid" time="0.13" steps="31034"/></proof>
  </goal>
  <goal name="eval_equivalent&#39;vc.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="eval_equivalent&#39;vc.2.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="676830"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.19" steps="35131"/></proof>
   </goal>
   <goal name="eval_equivalent&#39;vc.2.1" expl="postcondition">
   <proof prover="2"><result status="valid" time="0.18" steps="31586"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet">
 <proof prover="2"><result status="valid" time="0.16" steps="33397"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList">
 <proof prover="2"><result status="valid" time="0.15" steps="36242"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <proof prover="2"><result status="valid" time="0.22" steps="42196"/></proof>
 </goal>
 <goal name="bot_is_unsatisfiable">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3158046"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="278795"/></proof>
 <transf name="split_vc" >
  <goal name="bot_is_unsatisfiable.0">
  <proof prover="0"><result status="timeout" time="1.00" steps="2744728"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="279665"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="satisf">
 <proof prover="2"><result status="valid" time="0.23" steps="40219"/></proof>
 </goal>
 <goal name="singleton">
 <proof prover="2"><result status="valid" time="0.15" steps="28819"/></proof>
 </goal>
 <goal name="case1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3524859"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="149954"/></proof>
 <transf name="split_vc" >
  <goal name="case1.0">
  <proof prover="2"><result status="valid" time="0.11" steps="31960"/></proof>
  </goal>
  <goal name="case1.1">
  <proof prover="0"><result status="timeout" time="1.00" steps="3093707"/></proof>
  <proof prover="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="147844"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="if_unsat_then_not_sat">
 <proof prover="2"><result status="valid" time="0.15" steps="32821"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2632524"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="valid" time="0.12" steps="31909"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <proof prover="2"><result status="valid" time="0.18" steps="41376"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add">
 <transf name="split_vc" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition">
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease">
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition">
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_setconjunction_singleton">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="101814"/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
 <goal name="f2_1">
 <proof prover="0"><result status="timeout" time="1.00" steps="3403622"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="158458"/></proof>
 <transf name="split_vc" >
  <goal name="f2_1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2890814"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="f2_2">
 <proof prover="0"><result status="timeout" time="1.00" steps="2855002"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="140637"/></proof>
 <transf name="split_vc" >
  <goal name="f2_2.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2314502"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="f1">
 <proof prover="0"><result status="timeout" time="1.00" steps="3313387"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="158295"/></proof>
 <transf name="split_vc" >
  <goal name="f1.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2888586"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval">
 <transf name="split_vc" >
  <goal name="add_eval.0">
  <transf name="case" arg1="(is_empty s)">
   <goal name="add_eval.0.0" expl="true case">
   <proof prover="2"><undone/></proof>
   </goal>
   <goal name="add_eval.0.1" expl="false case">
   <proof prover="2"><undone/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
