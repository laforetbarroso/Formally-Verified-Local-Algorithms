<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn_new.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="502065"/></proof>
 <proof prover="1"><result status="failure" time="0.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="166565"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="27361"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.18" steps="36362"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="32013"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="30230"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28450"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1694285"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="384447"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1704407"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1737295"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="28098"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29046"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="27840"/></proof>
 </goal>
</theory>
<theory name="Converts" proved="true">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="30297"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28488"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29006"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="29853"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="148334"/></proof>
 <proof prover="4"><result status="valid" time="0.18" steps="801"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="781563"/></proof>
 <proof prover="1"><result status="failure" time="0.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="138587"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <proof prover="5"><result status="failure" time="0.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="780000"/></proof>
  <proof prover="1"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479244"/></proof>
  <proof prover="3"><result status="failure" time="0.00"/></proof>
  <proof prover="4" timelimit="5"><result status="valid" time="2.22" steps="1723"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="821519"/></proof>
 <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1508373"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="822680"/></proof>
  <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1520647"/></proof>
  <transf name="unfold" proved="true" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <transf name="compile_match" proved="true" >
    <goal name="PLtoAF_AFtoPL.0.0.0" proved="true">
    <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="823221"/></proof>
    <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1498044"/></proof>
    <transf name="destruct_term" proved="true" arg1="x">
     <goal name="PLtoAF_AFtoPL.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.13" steps="29347"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.13" steps="29226"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.2" proved="true">
     <proof prover="2"><result status="valid" time="0.06" steps="25457"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Horn">
 <goal name="eval_union&#39;vc" expl="VC for eval_union" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="590613"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="127265"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_union&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="27165"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_union&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="33365"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_union&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="63840"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_union&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="30808"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_union&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24" steps="40828"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="33931"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="37175"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.70" steps="86333"/></proof>
 </goal>
 <goal name="add_then_mem_convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="33417"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="36461"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2961440"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165773"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3251388"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="189776"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="unfold" proved="true" arg1="op_and">
   <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2631859"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="155776"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="phi">
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="2"><result status="valid" time="0.18" steps="36642"/></proof>
    </goal>
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2241017"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="186873"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="subst" proved="true" arg1="phi">
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
     <transf name="compile_match" proved="true" >
      <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
      <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="8219103"/></proof>
      <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1429751"/></proof>
      <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="instantiate" proved="true" arg1="convertAFtoPL&#39;spec" arg2="y">
       <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2529285"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="218594"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="2650827"/></proof>
        <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1617699"/></proof>
        <proof prover="4" timelimit="5"><result status="valid" time="3.56" steps="2968"/></proof>
        </goal>
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2531136"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275991"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="compile_match" proved="true" >
         <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2504673"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="275991"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="2"><result status="valid" time="0.08" steps="28263"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2423383"/></proof>
          <proof prover="2"><result status="timeout" time="1.00" steps="328917"/></proof>
          <proof prover="4"><result status="valid" time="1.34" steps="596"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2477801"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="226250"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct_term" proved="true" arg1="x1">
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.20" steps="37560"/></proof>
           </goal>
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.18" steps="35202"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2711962"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="161381"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2501093"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="177765"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="destruct" proved="true" arg1="H">
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="valid" time="0.09" steps="270831"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="63694"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.07" steps="211"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2548826"/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1359160"/></proof>
    <proof prover="4" timelimit="5"><result status="valid" time="2.24" steps="2035"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2489260"/></proof>
   <proof prover="2"><result status="valid" time="0.35" steps="63869"/></proof>
   <proof prover="4" timelimit="5" obsolete="true"><result status="valid" time="2.22" steps="2035"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_subset&#39;vc" expl="VC for convertConjunctionToSet_lemma_subset" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="40182"/></proof>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.31" steps="51157"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="178720"/></proof>
 <proof prover="4"><result status="valid" time="0.31" steps="1867"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="35636"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="39244"/></proof>
 </goal>
 <goal name="fset_from_list_distr" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2401631"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="310305"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fset_from_list_distr.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2472351"/></proof>
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="310274"/></proof>
  <transf name="induction_arg_ty_lex" proved="true" arg1="left">
   <goal name="fset_from_list_distr.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fset_from_list_distr.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="37234"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="fset_from_list_distr.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2765999"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="201978"/></proof>
    <transf name="compute_hyp_specified" proved="true" >
     <goal name="fset_from_list_distr.0.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.24" steps="43660"/></proof>
     <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_spec_then_right_nil" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2763725"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165584"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_spec_then_right_nil.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_spec_then_right_nil.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1742718"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.53" steps="99027"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="1028"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_spec_then_right_nil.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2554255"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="237377"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
    <goal name="not_subset_spec_then_right_nil.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3078664"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="162307"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_spec_then_right_nil.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3089687"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="253733"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
     <goal name="not_subset_spec_then_right_nil.0.0.1.1" proved="true">
     <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="11209234"/></proof>
     <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1699551"/></proof>
     <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_spec_then_right_nil.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="273711"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="114"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_spec_if_right_nil" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="2480379"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="255019"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_spec_if_right_nil.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_spec_if_right_nil.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="180651"/></proof>
   <proof prover="4"><result status="valid" time="0.18" steps="998"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_findFirst" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="4205157"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1122816"/></proof>
 <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2180989"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="193793"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="subset_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2175080"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191349"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct_term" proved="true" arg1="clauselist">
     <goal name="subset_findFirst.0.0.0.0" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2167519"/></proof>
     <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1091967"/></proof>
     <proof prover="4" timelimit="5"><result status="valid" time="1.12" steps="1632"/></proof>
     </goal>
     <goal name="subset_findFirst.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2121716"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187241"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="subst" proved="true" arg1="clauselist">
      <goal name="subset_findFirst.0.0.0.1.0" proved="true">
      <transf name="compile_match" proved="true" >
       <goal name="subset_findFirst.0.0.0.1.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.19" steps="40081"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="1504"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2484317"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="289845"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.50" steps="94115"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_spec&#39;vc" expl="VC for algorithmA_spec" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="2780638"/></proof>
 <proof prover="2" timelimit="5"><result status="valid" time="1.86" steps="167372"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2694797"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154187"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="157588"/></proof>
  <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2423265"/></proof>
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="219510"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="36523"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="41"/></proof>
   <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="36596"/></proof>
   <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="177426"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="44"/></proof>
   <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.00" steps="149614"/></proof>
  <proof prover="3" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2940533"/></proof>
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165423"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2715442"/></proof>
   <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159903"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2654036"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="valid" time="0.29" steps="52953"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.39" steps="66544"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2616339"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="157998"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.29" steps="50346"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.07" steps="489"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2608141"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="156385"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.33" steps="53139"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2694447"/></proof>
   <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="160019"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="valid" time="0.05" steps="146286"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="valid" time="0.22" steps="42691"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.39" steps="66930"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="9086325"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="890140"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.27" steps="48190"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.05" steps="272"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2621410"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="140350"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.33" steps="53266"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="2"><result status="valid" time="0.29" steps="56645"/></proof>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="41657"/></proof>
 </goal>
 <goal name="case1_top_imples_p" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2463643"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="126152"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_top_imples_p.0" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="44440"/></proof>
  </goal>
  <goal name="case1_top_imples_p.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2527138"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="117894"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(clauselist)">
   <goal name="case1_top_imples_p.1.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_top_imples_p.1.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_top_imples_p.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.15" steps="39642"/></proof>
     </goal>
     <goal name="case1_top_imples_p.1.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2670521"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119625"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_top_imples_p.1.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2551525"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="108168"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="subst" proved="true" arg1="clauselist">
       <goal name="case1_top_imples_p.1.0.0.1.0.0" proved="true">
       <transf name="subst" proved="true" arg1="clause">
        <goal name="case1_top_imples_p.1.0.0.1.0.0.0" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="854206"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="110165"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0" proved="true">
         <transf name="compile_match" proved="true" >
          <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0" proved="true">
          <transf name="eliminate_let" proved="true" >
           <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst1">
             <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst2">
              <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
              <proof prover="2"><result status="valid" time="0.15" steps="38882"/></proof>
              </goal>
              <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1030602"/></proof>
              <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="150794"/></proof>
              <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <transf name="replace" proved="true" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
               <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0" proved="true">
               <transf name="replace" proved="true" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
                <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0" proved="true">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1053451"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="149490"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" proved="true" >
                 <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0" proved="true">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1060595"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="136678"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 <transf name="compile_match" proved="true" >
                  <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0" proved="true">
                  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1060201"/></proof>
                  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="136149"/></proof>
                  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                  <transf name="replace" proved="true" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                   <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
                   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1008332"/></proof>
                   <proof prover="2"><result status="valid" time="0.68" steps="85829"/></proof>
                   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                   </goal>
                   <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="timeout" time="1.00" steps="132948"/></proof>
                   <proof prover="4"><result status="valid" time="0.70" steps="1726"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="timeout" time="1.00" steps="141124"/></proof>
                <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.71" steps="102440"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="40"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1_conjuction_imples_p" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1276645"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124114"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_conjuction_imples_p.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1183404"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124935"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case1_conjuction_imples_p.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_conjuction_imples_p.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_conjuction_imples_p.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="39876"/></proof>
     </goal>
     <goal name="case1_conjuction_imples_p.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1187744"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125573"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_conjuction_imples_p.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1254019"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="152247"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="999"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case1_conjuction_imples_p.0.0.0.1.0.0" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1215783"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154201"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="981"/></proof>
       <transf name="assert" proved="true" arg1="(right = Nil)">
        <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="148071"/></proof>
        <proof prover="2"><result status="valid" time="0.34" steps="53380"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="53"/></proof>
        </goal>
        <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2202572"/></proof>
        <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="53948"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="979"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2222131"/></proof>
         <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="67586"/></proof>
         <proof prover="4" obsolete="true"><result status="valid" time="0.08" steps="505"/></proof>
         <transf name="subst" proved="true" arg1="clauselist">
          <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0" proved="true">
          <transf name="subst" proved="true" arg1="clause">
           <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0" proved="true">
           <transf name="compile_match" proved="true" >
            <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0" proved="true">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2833690"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124102"/></proof>
            <proof prover="4" obsolete="true"><result status="valid" time="0.04" steps="322"/></proof>
            <transf name="eliminate_let" proved="true" >
             <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0" proved="true">
              <transf name="destruct" proved="true" arg1="Hinst1">
               <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0" proved="true">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="4376259"/></proof>
               <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="137579"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.06" steps="348"/></proof>
               <transf name="destruct" proved="true" arg1="Hinst1">
                <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="2"><result status="valid" time="0.10" steps="41926"/></proof>
                </goal>
                <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0.1" proved="true">
                <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="156508"/></proof>
                <proof prover="2"><result status="valid" time="0.27" steps="42450"/></proof>
                <proof prover="4" obsolete="true"><result status="valid" time="0.05" steps="247"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="case1_conjuction_imples_p.0.0.0.1.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="147543"/></proof>
       <proof prover="2"><result status="valid" time="0.17" steps="40437"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="966"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1_general" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="910017"/></proof>
 <proof prover="2"><result status="valid" time="0.15" steps="41536"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="case1_general_top_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="41728"/></proof>
 </goal>
 <goal name="case1_general_conjuction_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="41964"/></proof>
 </goal>
 <goal name="case2_top_imples_p" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1991603"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="161280"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case2_top_imples_p.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2611328"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158114"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_top_imples_p.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
    <goal name="case2_top_imples_p.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2416375"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159792"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case2_top_imples_p.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7762"/></proof>
     <proof prover="2"><result status="valid" time="0.10" steps="37240"/></proof>
     <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="44"/></proof>
     </goal>
     <goal name="case2_top_imples_p.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2446020"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159779"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case2_top_imples_p.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2739576"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="144687"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case2_top_imples_p.0.0.0.1.0.0" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330448"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="150250"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="subst" proved="true" arg1="right">
        <goal name="case2_top_imples_p.0.0.0.1.0.0.0" proved="true">
        <transf name="destruct_term" proved="true" arg1="x1">
         <goal name="case2_top_imples_p.0.0.0.1.0.0.0.0" proved="true">
         <transf name="subst" proved="true" arg1="x3">
          <goal name="case2_top_imples_p.0.0.0.1.0.0.0.0.0" proved="true">
          <transf name="compile_match" proved="true" >
           <goal name="case2_top_imples_p.0.0.0.1.0.0.0.0.0.0" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2410599"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="110005"/></proof>
           <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
           <transf name="assert" proved="true" arg1="((convertRStoAF x1) &lt;&gt; ABot)">
            <goal name="case2_top_imples_p.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="2"><result status="timeout" time="1.00" steps="119992"/></proof>
            <proof prover="4"><result status="valid" time="0.95" steps="2907"/></proof>
            </goal>
            <goal name="case2_top_imples_p.0.0.0.1.0.0.0.0.0.0.1" proved="true">
            <proof prover="2"><result status="timeout" time="1.00" steps="110164"/></proof>
            <proof prover="4"><result status="valid" time="0.40" steps="2427"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="case2_top_imples_p.0.0.0.1.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="39995"/></proof>
       <proof prover="2"><result status="valid" time="0.16" steps="41466"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="50"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_conjunction_imples_p">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1165097"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179511"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case2_conjunction_imples_p.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_conjunction_imples_p.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="c">
    <goal name="case2_conjunction_imples_p.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case2_conjunction_imples_p.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.10" steps="37459"/></proof>
     </goal>
     <goal name="case2_conjunction_imples_p.0.0.0.1">
     <transf name="destruct" arg1="Hinst">
      <goal name="case2_conjunction_imples_p.0.0.0.1.0">
      <transf name="destruct" arg1="Hinst">
       <goal name="case2_conjunction_imples_p.0.0.0.1.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.16" steps="41377"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="50"/></proof>
       </goal>
       <goal name="case2_conjunction_imples_p.0.0.0.1.0.1">
       <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7375026"/></proof>
       <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="698290"/></proof>
       <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <transf name="unfold" arg1="is_satisfiable_clauselist" arg2="in" arg3="H">
        <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0">
        <transf name="subst" arg1="clauselist">
         <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0">
         <transf name="compile_match" >
          <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="600638"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="184568"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct" arg1="H">
           <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0">
           <transf name="unfold" arg1="is_satisfiable_clause" arg2="in" arg3="H1">
            <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="603136"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="168268"/></proof>
            <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
            <transf name="destruct_term" arg1="clause">
             <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0">
             <transf name="subst" arg1="clause">
              <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0.0">
              <transf name="compile_match" >
               <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0.0.0">
               <transf name="eliminate_let" >
                <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="615333"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="184395"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="destruct" arg1="H1">
                 <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0.0">
                 <proof prover="0"><result status="timeout" time="1.00" steps="599795"/></proof>
                 <proof prover="2"><result status="timeout" time="1.00" steps="118911"/></proof>
                 <proof prover="4"><result status="timeout" time="1.00"/></proof>
                 </goal>
                 <goal name="case2_conjunction_imples_p.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0.1" proved="true">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="611621"/></proof>
                 <proof prover="2"><result status="timeout" time="1.00" steps="133570"/></proof>
                 <proof prover="4"><result status="valid" time="0.73" steps="4129"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_general" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="45762"/></proof>
 </goal>
 <goal name="case2_general_top_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="43148"/></proof>
 </goal>
 <goal name="case2_general_conjunction_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="43546"/></proof>
 </goal>
 <goal name="case3_induction">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2469402"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="182018"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case3_induction.0">
  <transf name="destruct_term" arg1="clauselist">
   <goal name="case3_induction.0.0">
   <transf name="case" arg1="(length clauselist &gt;= 1)">
    <goal name="case3_induction.0.0.0" expl="true case">
    <proof prover="0"><result status="timeout" time="1.00" steps="2480208"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="130236"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    </goal>
    <goal name="case3_induction.0.0.1" expl="false case" proved="true">
    <proof prover="2"><result status="valid" time="0.20" steps="44184"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="case3_induction.0.1" proved="true">
   <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
    <goal name="case3_induction.0.1.0" proved="true">
    <proof prover="0"><result status="valid" time="0.08" steps="235314"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="126034"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
