<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn_fF.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="498478"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.13" steps="27361"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.20" steps="36362"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18" steps="32013"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="30230"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="27803"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="777962"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="276023"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="821915"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1610507"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="27525"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28384"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="27267"/></proof>
 </goal>
</theory>
<theory name="Converts">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="30327"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28518"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29036"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="29883"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1"><result status="valid" time="0.24" steps="725"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="148366"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="778852"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="139395"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <proof prover="1"><result status="valid" time="0.99" steps="1492"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="138818"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="821118"/></proof>
 <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1536345"/></proof>
 <transf name="split_vc" >
  <goal name="PLtoAF_AFtoPL.0">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="822183"/></proof>
  <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1544362"/></proof>
  <transf name="unfold" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0">
   <transf name="compile_match" >
    <goal name="PLtoAF_AFtoPL.0.0.0">
    <proof prover="0" timelimit="5"><undone/></proof>
    <proof prover="1" timelimit="5"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1491924"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Horn">
 <goal name="aux&#39;vc" expl="VC for aux">
 <proof prover="0"><result status="timeout" time="1.00" steps="550053"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="131419"/></proof>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="35308"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="38497"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.71" steps="89096"/></proof>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="34942"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="37914"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1">
 <proof prover="0"><result status="timeout" time="1.00" steps="2526385"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="156748"/></proof>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.30" steps="51740"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="1"><result status="valid" time="0.37" steps="1864"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="111175"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="36845"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="40559"/></proof>
 </goal>
 <goal name="fset_from_list_distr">
 <proof prover="0"><result status="timeout" time="1.00" steps="2288993"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="278942"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst">
 <proof prover="0"><result status="timeout" time="1.00" steps="2689989"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="195307"/></proof>
 </goal>
 <goal name="algorithmA_basic&#39;vc" expl="VC for algorithmA_basic" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="43099"/></proof>
 </goal>
 <goal name="not_subset">
 <proof prover="0"><result status="timeout" time="1.00" steps="2561558"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="250815"/></proof>
 </goal>
 <goal name="subset">
 <proof prover="0"><result status="timeout" time="1.00" steps="2187633"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="200007"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 <proof prover="0"><result status="timeout" time="1.00" steps="2513296"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="112447"/></proof>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="41406"/></proof>
 </goal>
 <goal name="A1" proved="true">
 <proof prover="2"><result status="valid" time="0.24" steps="46625"/></proof>
 </goal>
 <goal name="case1_with_basic" proved="true">
 <proof prover="2"><result status="valid" time="0.48" steps="69924"/></proof>
 </goal>
 <goal name="case2_with_basic">
 <proof prover="0"><result status="timeout" time="1.00" steps="3011415"/></proof>
 <proof prover="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="128675"/></proof>
 </goal>
</theory>
</file>
</why3session>
