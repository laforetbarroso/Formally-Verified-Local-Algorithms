<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.3.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn_fF.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0" obsolete="true"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="323693"/></proof>
 <proof prover="3"><result status="valid" time="0.09"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="498478"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="150112"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.20" steps="36362"/></proof>
  <proof prover="5"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="27361"/></proof>
  <proof prover="5"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="32013"/></proof>
  <proof prover="5"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="30230"/></proof>
 <proof prover="5"><result status="valid" time="0.24"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28275"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.20"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="777962"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="276023"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="821915"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1610507"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="27923"/></proof>
    <proof prover="5" obsolete="true"><result status="valid" time="0.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28871"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.19"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="27665"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.15"/></proof>
 </goal>
</theory>
<theory name="Converts" proved="true">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="30297"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.17"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28488"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29006"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.13"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="29853"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.24"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="1" obsolete="true"><result status="valid" time="0.24" steps="725"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="138365"/></proof>
 <proof prover="4"><result status="valid" time="0.19" steps="801"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="778852"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="139395"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="779058"/></proof>
  <proof prover="1" obsolete="true"><result status="valid" time="0.99" steps="1492"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479244"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" timelimit="5"><result status="valid" time="2.27" steps="1723"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="821118"/></proof>
 <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1536345"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="822183"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1544362"/></proof>
  <transf name="unfold" proved="true" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <transf name="compile_match" proved="true" >
    <goal name="PLtoAF_AFtoPL.0.0.0" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1491924"/></proof>
    <transf name="destruct_term" proved="true" arg1="x">
     <goal name="PLtoAF_AFtoPL.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.07" steps="29347"/></proof>
     <proof prover="5" obsolete="true"><result status="valid" time="0.21"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="29226"/></proof>
     <proof prover="5" obsolete="true"><result status="valid" time="0.17"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.2" proved="true">
     <proof prover="2"><result status="valid" time="0.14" steps="25457"/></proof>
     <proof prover="5" obsolete="true"><result status="valid" time="0.12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Logic" proved="true">
 <goal name="subset_findFirst" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="145206"/></proof>
   <proof prover="4"><result status="valid" time="0.15" steps="722"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2348909"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="368789"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.35" steps="64478"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="algorithmA&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7261231"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1703534"/></proof>
  <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="31860"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2611441"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="190636"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2474757"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="210489"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.1.0" expl="unreachable point" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="32569"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="G" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="27292"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="550053"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131419"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="27024"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="33190"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.36" steps="63665"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="30633"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="40653"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="33756"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.29"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="37000"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.34"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.71" steps="85448"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="33242"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="36286"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.28"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2526385"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="156748"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3004081"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191990"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="unfold" proved="true" arg1="op_and">
   <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2860096"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205797"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="phi">
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="2"><result status="valid" time="0.17" steps="36467"/></proof>
    </goal>
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294999"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="205196"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="subst" proved="true" arg1="phi">
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
     <transf name="compile_match" proved="true" >
      <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
      <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="5333857"/></proof>
      <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1429260"/></proof>
      <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="instantiate" proved="true" arg1="convertAFtoPL&#39;spec" arg2="y">
       <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2461630"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191714"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="2390406"/></proof>
        <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1597142"/></proof>
        <proof prover="4" timelimit="5"><result status="valid" time="3.60" steps="2968"/></proof>
        </goal>
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2473181"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="377456"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="compile_match" proved="true" >
         <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2457666"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="377456"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="2"><result status="valid" time="0.07" steps="28122"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2354617"/></proof>
          <proof prover="2"><result status="timeout" time="1.00" steps="328542"/></proof>
          <proof prover="4"><result status="valid" time="1.49" steps="596"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2457626"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="378035"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct_term" proved="true" arg1="x1">
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.19" steps="37385"/></proof>
           </goal>
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.17" steps="35027"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2204716"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="143462"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2386192"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="188562"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="destruct" proved="true" arg1="H">
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="2301828"/></proof>
   <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1358232"/></proof>
   <proof prover="4" timelimit="5"><result status="valid" time="2.28" steps="2035"/></proof>
   </goal>
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2177399"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="171226"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294031"/></proof>
    <proof prover="2"><result status="valid" time="0.35" steps="63676"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="2.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_subset&#39;vc" expl="VC for convertConjunctionToSet_lemma_subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2214754"/></proof>
 <proof prover="2"><result status="valid" time="0.20" steps="40007"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.30" steps="50977"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.47"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="1" obsolete="true"><result status="valid" time="0.37" steps="1864"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="160900"/></proof>
 <proof prover="4"><result status="valid" time="0.32" steps="1867"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="35461"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.29"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="39069"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.47"/></proof>
 </goal>
 <goal name="fset_from_list_distr" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2288993"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="278942"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fset_from_list_distr.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2440900"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="285750"/></proof>
  <transf name="induction_arg_ty_lex" proved="true" arg1="left">
   <goal name="fset_from_list_distr.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fset_from_list_distr.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.15" steps="37059"/></proof>
    <proof prover="5" obsolete="true"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="fset_from_list_distr.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2572017"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="214456"/></proof>
    <transf name="compute_hyp_specified" proved="true" >
     <goal name="fset_from_list_distr.0.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.21" steps="43423"/></proof>
     <proof prover="5" obsolete="true"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_if_right_nil">
 <proof prover="0"><result status="timeout" time="1.00" steps="2203984"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="316142"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" >
  <goal name="not_subset_if_right_nil.0">
  <transf name="destruct_term" arg1="(findFirst clauselist c)">
   <goal name="not_subset_if_right_nil.0.0">
   <transf name="replace" arg1="(findFirst clauselist c)" arg2="(x1, x)">
    <goal name="not_subset_if_right_nil.0.0.0">
    <proof prover="0"><result status="timeout" time="1.00" steps="2229558"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="244755"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="compile_match" >
     <goal name="not_subset_if_right_nil.0.0.0.0">
     <proof prover="0"><result status="timeout" time="1.00" steps="2330930"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="244755"/></proof>
     <proof prover="4"><result status="timeout" time="1.00"/></proof>
     <transf name="split_vc" >
      <goal name="not_subset_if_right_nil.0.0.0.0.0">
      <proof prover="0"><result status="timeout" time="1.00" steps="2494863"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="294505"/></proof>
      <proof prover="4"><result status="timeout" time="1.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="not_subset_if_right_nil.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.08" steps="31285"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_findFirst">
 <proof prover="0"><result status="timeout" time="1.00" steps="1941796"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="189903"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" >
  <goal name="subset_findFirst.0">
  <transf name="induction_arg_ty_lex" arg1="clauselist">
   <goal name="subset_findFirst.0.0">
   <proof prover="0"><result status="timeout" time="1.00" steps="2159219"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="193154"/></proof>
   <proof prover="4"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" >
    <goal name="subset_findFirst.0.0.0" proved="true">
    <proof prover="2"><result status="timeout" time="1.00" steps="198291"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="37"/></proof>
    </goal>
    <goal name="subset_findFirst.0.0.1" proved="true">
    <proof prover="2"><result status="timeout" time="1.00" steps="201729"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="37"/></proof>
    </goal>
    <goal name="subset_findFirst.0.0.2">
    <proof prover="0"><result status="timeout" time="1.00" steps="2651377"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="186164"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    </goal>
    <goal name="subset_findFirst.0.0.3">
    <proof prover="0"><result status="timeout" time="1.00" steps="2613882"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="203021"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2579569"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="357655"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.46" steps="93594"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_spec&#39;vc" expl="VC for algorithmA_spec" proved="true">
 <proof prover="2"><result status="valid" time="1.44" steps="134128"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2689989"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="195307"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="197628"/></proof>
  <proof prover="4"><result status="valid" time="0.05" steps="40"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2291285"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="268669"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.16" steps="36170"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.06" steps="42"/></proof>
   <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="55"/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="36243"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="176907"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="44"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.00" steps="145237"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330209"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="212010"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2416853"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="210222"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2287664"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="197037"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="timeout" time="2.00" steps="351011"/></proof>
      <proof prover="4"><result status="valid" time="0.02" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3068786"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="173169"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.27" steps="49929"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2646813"/></proof>
    <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="58"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="174345"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="52752"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2294612"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="243686"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7196568"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1109409"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="timeout" time="2.00" steps="357714"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.39"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="13235241"/></proof>
    <proof prover="1" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1103557"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.26" steps="47773"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5" obsolete="true"><result status="valid" time="0.37"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2990973"/></proof>
    <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="58"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="174222"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="52913"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_spec_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2695619"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="189128"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_spec_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_spec_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1768815"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.54" steps="98476"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="1021"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_spec_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3119723"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="223138"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
    <goal name="not_subset_spec_findFirst.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3108486"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="220962"/></proof>
    <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="37"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_spec_findFirst.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2531452"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="202597"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
     <goal name="not_subset_spec_findFirst.0.0.1.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3216233"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="168621"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_spec_findFirst.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="167228"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="121"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2607695"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="219071"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2523035"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="196368"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2299219"/></proof>
    <proof prover="2"><result status="valid" time="0.19" steps="40201"/></proof>
    <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="37"/></proof>
    </goal>
    <goal name="not_subset_findFirst.0.0.1" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2417993"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="167738"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_findFirst.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2275184"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="181368"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
     <goal name="not_subset_findFirst.0.0.1.1" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2542841"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="168993"/></proof>
     <proof prover="4"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_findFirst.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="161941"/></proof>
      <proof prover="4"><result status="valid" time="0.04" steps="267"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2561558"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="39530"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="not_subset.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2050239"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.20" steps="37803"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="not_subset.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1737343"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2"><result status="valid" time="0.19" steps="36191"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="subset" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2187633"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2"><result status="valid" time="0.19" steps="42481"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.25"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2513296"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.28" steps="58136"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="algorithmA&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="valid" time="0.02" steps="61"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="171049"/></proof>
  <proof prover="4"><result status="valid" time="0.06" steps="48"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="40294"/></proof>
  <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="59"/></proof>
  <proof prover="5" obsolete="true"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="algorithmA&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2593413"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="189661"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2357870"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="190849"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="induction_arg_ty_lex" proved="true" arg1="x">
    <goal name="algorithmA&#39;vc.2.0.0" expl="VC for algorithmA" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="41456"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3009264"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187399"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="induction_arg_ty_lex" proved="true" arg1="x">
    <goal name="algorithmA&#39;vc.2.1.0" expl="VC for algorithmA" proved="true">
    <proof prover="2"><result status="valid" time="0.16" steps="48197"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2779925"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179859"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3173253"/></proof>
   <proof prover="2"><result status="valid" time="0.25" steps="38128"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="algorithmA&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2413841"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="2"><result status="valid" time="0.26" steps="50129"/></proof>
   <proof prover="5" obsolete="true"><result status="valid" time="0.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="algorithmA&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2907154"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="185662"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="algorithmA&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2960633"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="173890"/></proof>
   <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list clauselist)">
    <goal name="algorithmA&#39;vc.4.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(to_fset c)">
     <goal name="algorithmA&#39;vc.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2636604"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165815"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="assert" proved="true" arg1="(exists l r. findFirst (fset_from_list clauselist) (to_fset c) = (l,r))">
      <goal name="algorithmA&#39;vc.4.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2903632"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="215403"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="algorithmA&#39;vc.4.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.09" steps="37075"/></proof>
       </goal>
       <goal name="algorithmA&#39;vc.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2637881"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="216018"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="compute_hyp_specified" proved="true" >
        <goal name="algorithmA&#39;vc.4.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.39" steps="49820"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="algorithmA&#39;vc.4.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.16" steps="39030"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.70" steps="1644"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="algorithmA&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;spec" arg2="(fset_from_list clauselist)">
    <goal name="algorithmA&#39;vc.4.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(to_fset c)">
     <goal name="algorithmA&#39;vc.4.1.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists l r. findFirst (fset_from_list clauselist) (to_fset c) = (l,r))">
      <goal name="algorithmA&#39;vc.4.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2220672"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="201334"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="algorithmA&#39;vc.4.1.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.09" steps="37093"/></proof>
       </goal>
       <goal name="algorithmA&#39;vc.4.1.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2166208"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="195873"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="compute_hyp_specified" proved="true" >
        <goal name="algorithmA&#39;vc.4.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.26" steps="52310"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="algorithmA&#39;vc.4.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2051223"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="243177"/></proof>
      <proof prover="4"><result status="valid" time="0.64" steps="1633"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="42253"/></proof>
 <proof prover="5" obsolete="true"><result status="valid" time="0.30"/></proof>
 </goal>
 <goal name="case1_singleton_list" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1368324"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="155048"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_singleton_list.0" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="45353"/></proof>
  </goal>
  <goal name="case1_singleton_list.1" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2424958"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="117308"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(clauselist)">
   <goal name="case1_singleton_list.1.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_singleton_list.1.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_singleton_list.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="40238"/></proof>
     </goal>
     <goal name="case1_singleton_list.1.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2392891"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="118357"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_singleton_list.1.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2488215"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="121900"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="subst" proved="true" arg1="clauselist">
       <goal name="case1_singleton_list.1.0.0.1.0.0" proved="true">
       <transf name="subst" proved="true" arg1="clause">
        <goal name="case1_singleton_list.1.0.0.1.0.0.0" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1813391"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="128647"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_singleton_list.1.0.0.1.0.0.0.0" proved="true">
         <transf name="compile_match" proved="true" >
          <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0" proved="true">
          <transf name="eliminate_let" proved="true" >
           <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst1">
             <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst2">
              <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
              <proof prover="2"><result status="valid" time="0.15" steps="39482"/></proof>
              </goal>
              <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1074645"/></proof>
              <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="147785"/></proof>
              <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
              <transf name="replace" proved="true" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
               <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0" proved="true">
               <transf name="replace" proved="true" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
                <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0" proved="true">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1093827"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="136922"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" proved="true" >
                 <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0" proved="true">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1107216"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135273"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 <transf name="compile_match" proved="true" >
                  <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0" proved="true">
                  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1109968"/></proof>
                  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135378"/></proof>
                  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                  <transf name="replace" proved="true" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                   <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
                   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1052835"/></proof>
                   <proof prover="2"><result status="valid" time="0.44" steps="66604"/></proof>
                   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                   </goal>
                   <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="timeout" time="1.00" steps="134772"/></proof>
                   <proof prover="4"><result status="valid" time="0.71" steps="1530"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="timeout" time="1.00" steps="130140"/></proof>
                <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="case1_singleton_list.1.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.75" steps="112851"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="38"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_singleton_list" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="case2_singleton_list.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2387286"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124456"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_singleton_list.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case2_singleton_list.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case2_singleton_list.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.17" steps="40472"/></proof>
     </goal>
     <goal name="case2_singleton_list.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1876838"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124415"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case2_singleton_list.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2143801"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="129086"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="976"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case2_singleton_list.0.0.0.1.0.0" proved="true">
       <proof prover="0" obsolete="true"><result status="valid" time="0.06" steps="147301"/></proof>
       <proof prover="2" obsolete="true"><result status="valid" time="0.24" steps="41026"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.04" steps="49"/></proof>
       <transf name="assert" proved="true" arg1="(right = Nil)">
        <goal name="case2_singleton_list.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7428"/></proof>
        <proof prover="2" obsolete="true"><result status="valid" time="0.13" steps="36024"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="46"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case2_singleton_list.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7488"/></proof>
         <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="36229"/></proof>
         <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="46"/></proof>
         <transf name="subst" proved="true" arg1="clauselist">
          <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="subst" proved="true" arg1="clause">
           <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="compile_match" proved="true" >
            <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7482"/></proof>
            <proof prover="2" obsolete="true"><result status="valid" time="0.11" steps="36100"/></proof>
            <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="44"/></proof>
            <transf name="eliminate_let" proved="true" >
             <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="destruct" proved="true" arg1="Hinst1">
               <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7516"/></proof>
               <proof prover="2" obsolete="true"><result status="valid" time="0.11" steps="36316"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="44"/></proof>
               <transf name="destruct" proved="true" arg1="Hinst1">
                <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0" obsolete="true"><result status="valid" time="0.06" steps="154111"/></proof>
                <proof prover="2"><result status="valid" time="0.31" steps="50189"/></proof>
                <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
                </goal>
                <goal name="case2_singleton_list.0.0.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                <proof prover="2"><result status="valid" time="0.59" steps="91434"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="case2_singleton_list.0.0.0.1.0.0.1" proved="true">
        <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="147303"/></proof>
        <proof prover="2"><result status="valid" time="0.20" steps="41090"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="49"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="case2_singleton_list.0.0.0.1.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1810524"/></proof>
       <proof prover="2"><result status="valid" time="0.17" steps="41033"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="974"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_clause_singleton_list" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="42158"/></proof>
 </goal>
 <goal name="test" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3317713"/></proof>
 <proof prover="2"><result status="valid" time="0.15" steps="42272"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="case1_list" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="2650180"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="167563"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_list.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2619337"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="206800"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case1_list.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="c">
    <goal name="case1_list.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2599864"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="182173"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_list.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2805175"/></proof>
     <proof prover="2"><result status="valid" time="0.10" steps="37572"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
     <goal name="case1_list.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2270781"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="160728"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_list.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2341059"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="167467"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case1_list.0.0.0.1.0.0" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2475367"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="169070"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="subst" proved="true" arg1="right">
        <goal name="case1_list.0.0.0.1.0.0.0" proved="true">
        <transf name="destruct_term" proved="true" arg1="x1">
         <goal name="case1_list.0.0.0.1.0.0.0.0" proved="true">
         <transf name="subst" proved="true" arg1="x3">
          <goal name="case1_list.0.0.0.1.0.0.0.0.0" proved="true">
          <transf name="compile_match" proved="true" >
           <goal name="case1_list.0.0.0.1.0.0.0.0.0.0" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2372615"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154182"/></proof>
           <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
           <transf name="assert" proved="true" arg1="((convertRStoAF x1) &lt;&gt; ABot)">
            <goal name="case1_list.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="2"><result status="timeout" time="1.00" steps="170393"/></proof>
            <proof prover="4"><result status="valid" time="0.99" steps="2923"/></proof>
            </goal>
            <goal name="case1_list.0.0.0.1.0.0.0.0.0.0.1" proved="true">
            <proof prover="2"><result status="timeout" time="1.00" steps="154539"/></proof>
            <proof prover="4"><result status="valid" time="0.48" steps="3064"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="case1_list.0.0.0.1.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2366479"/></proof>
       <proof prover="2"><result status="valid" time="0.14" steps="41710"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_list">
 <proof prover="0"><result status="timeout" time="1.00" steps="732743"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="154267"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case2_list.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_list.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="c">
    <goal name="case2_list.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case2_list.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.09" steps="37795"/></proof>
     </goal>
     <goal name="case2_list.0.0.0.1">
     <transf name="destruct" arg1="Hinst">
      <goal name="case2_list.0.0.0.1.0">
      <transf name="destruct" arg1="Hinst">
       <goal name="case2_list.0.0.0.1.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.15" steps="41622"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="1946"/></proof>
       </goal>
       <goal name="case2_list.0.0.0.1.0.1">
       <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="1547552"/></proof>
       <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="842712"/></proof>
       <proof prover="4" timelimit="5"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_clause_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="693530"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="42877"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="case_induction_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2560093"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154921"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case_induction_list.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2613937"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="174863"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="induction_arg_ty_lex" arg1="clauselist">
   <goal name="case_induction_list.0.0">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2368676"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158050"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" >
    <goal name="case_induction_list.0.0.0">
    <proof prover="0" obsolete="true"><result status="valid" time="0.06" steps="201850"/></proof>
    <proof prover="2" obsolete="true"><result status="valid" time="1.34" steps="187143"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
    <goal name="case_induction_list.0.0.1">
    <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="6682119"/></proof>
    <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="500034"/></proof>
    <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="(Cons x1 x)">
     <goal name="case_induction_list.0.0.1.0">
     <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
      <goal name="case_induction_list.0.0.1.0.0">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2129745"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="148349"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" arg1="Hinst">
       <goal name="case_induction_list.0.0.1.0.0.0" expl="destruct premise">
       <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="41862"/></proof>
       </goal>
       <goal name="case_induction_list.0.0.1.0.0.1">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2116057"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="145385"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="destruct" arg1="Hinst">
        <goal name="case_induction_list.0.0.1.0.0.1.0">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1881312"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="140669"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
        <transf name="destruct_term" arg1="right">
         <goal name="case_induction_list.0.0.1.0.0.1.0.0">
         <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="43556"/></proof>
         </goal>
         <goal name="case_induction_list.0.0.1.0.0.1.0.1">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2292161"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="137773"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="subst" arg1="right">
          <goal name="case_induction_list.0.0.1.0.0.1.0.1.0">
          <transf name="destruct_term" arg1="x1">
           <goal name="case_induction_list.0.0.1.0.0.1.0.1.0.0">
           <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1528152"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="129165"/></proof>
           <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
           <transf name="subst" arg1="x3">
            <goal name="case_induction_list.0.0.1.0.0.1.0.1.0.0.0">
            <transf name="compile_match" >
             <goal name="case_induction_list.0.0.1.0.0.1.0.1.0.0.0.0">
             <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="529859"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="133808"/></proof>
             <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
             <transf name="instantiate" arg1="case2_list" arg2="(left ++ x)">
              <goal name="case_induction_list.0.0.1.0.0.1.0.1.0.0.0.0.0">
              <transf name="instantiate" arg1="Hinst" arg2="(add (convertRStoAF x1) (singleton ATop))">
               <goal name="case_induction_list.0.0.1.0.0.1.0.1.0.0.0.0.0.0">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="537752"/></proof>
               <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="126550"/></proof>
               <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="horn_proof">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2237150"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="118401"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" >
  <goal name="horn_proof.0">
  <transf name="destruct_term" arg1="phi">
   <goal name="horn_proof.0.0">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2634554"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="146073"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" arg1="x">
    <goal name="horn_proof.0.0.0">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3070890"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158034"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct_term" arg1="x1">
     <goal name="horn_proof.0.0.0.0">
     <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="41836"/></proof>
     </goal>
     <goal name="horn_proof.0.0.0.1">
     <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="41912"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="horn_proof.0.0.1">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2642238"/></proof>
    <proof prover="2" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="horn_proof.0.1">
   <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="9447638"/></proof>
   <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="808652"/></proof>
   <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="destruct_term" arg1="x">
    <goal name="horn_proof.0.1.0">
    <transf name="destruct_term" arg1="x1">
     <goal name="horn_proof.0.1.0.0">
     <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="41837"/></proof>
     </goal>
     <goal name="horn_proof.0.1.0.1">
     <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="41833"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="horn_proof.0.0.0">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2807833"/></proof>
    <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="41815"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sat_list_then_sat_all_clause">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2326055"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="185175"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="sat_list_then_sat_all_clause.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2317565"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="163108"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="induction_arg_ty_lex" arg1="clauselist">
   <goal name="sat_list_then_sat_all_clause.0.0">
   <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="40196"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2">
 <proof prover="0"><result status="timeout" time="1.00" steps="2238850"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="128736"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case2.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2219308"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="144169"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list (convertToList phi))">
   <goal name="case2.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case2.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case2.0.0.0.0" expl="destruct premise">
     <proof prover="2"><result status="valid" time="0.16" steps="42159"/></proof>
     </goal>
     <goal name="case2.0.0.0.1">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2189460"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119796"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case2.0.0.0.1.0">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2273184"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="135858"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" arg1="right">
       <goal name="case2.0.0.0.1.0.0">
       <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7505025"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="139416"/></proof>
       <proof prover="4"><result status="valid" time="0.24" steps="1518"/></proof>
       </goal>
       <goal name="case2.0.0.0.1.0.1">
       <proof prover="2"><result status="valid" time="0.17" steps="42689"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="1508"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_induction1">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2248884"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125420"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" >
  <goal name="case_induction1.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="(fset_from_list (convertToList phi))">
   <goal name="case_induction1.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case_induction1.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case_induction1.0.0.0.0" expl="destruct premise">
     <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="42330"/></proof>
     </goal>
     <goal name="case_induction1.0.0.0.1">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2697257"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131720"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case_induction1.0.0.0.1.0">
      <transf name="destruct" arg1="Hinst">
       <goal name="case_induction1.0.0.0.1.0.0">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330634"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="139229"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="assert" arg1="(convertRStoAF p &lt;&gt; ABot)">
        <goal name="case_induction1.0.0.0.1.0.1.0" expl="asserted formula">
        <proof prover="0"><result status="timeout" time="1.00" steps="2405368"/></proof>
        <proof prover="2"><result status="failure" time="0.00"/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        </goal>
        <goal name="case_induction1.0.0.0.1.0.1.1">
        <proof prover="0"><result status="timeout" time="1.00" steps="2289452"/></proof>
        <proof prover="2"><result status="failure" time="0.00"/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="case_induction1.0.0.0.1.0.1">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2340014"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="162150"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1">
 <proof prover="0"><result status="timeout" time="1.00" steps="2865996"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="141174"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case1.0">
  <proof prover="2"><result status="valid" time="0.44" steps="63922"/></proof>
  </goal>
  <goal name="case1.1">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2178676"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="160860"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="replace" arg1="(fset_from_list (convertToList phi))" arg2="(Cons (singleton ATop,p) Nil)">
   <goal name="case1.1.0">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1900403"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="138681"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="(Cons (singleton ATop, p) (Nil: list (fset atomicformula, rightside)))">
    <goal name="case1.1.0.0">
    <transf name="instantiate" arg1="Hinst" arg2="(singleton ATop)">
     <goal name="case1.1.0.0.0">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2009342"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="109910"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case1.1.0.0.0.0" expl="destruct premise">
      <proof prover="2"><result status="valid" time="0.16" steps="41992"/></proof>
      </goal>
      <goal name="case1.1.0.0.0.1">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1937483"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="116798"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct" arg1="Hinst">
       <goal name="case1.1.0.0.0.1.0">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1574937"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="109775"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="unfold" arg1="findFirst" arg2="in" arg3="Hinst1">
        <goal name="case1.1.0.0.0.1.0.0">
        <transf name="compile_match" >
         <goal name="case1.1.0.0.0.1.0.0.0">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1645594"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="119554"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <transf name="eliminate_let" >
          <goal name="case1.1.0.0.0.1.0.0.0.0">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1672800"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="118674"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="eliminate_if" >
           <goal name="case1.1.0.0.0.1.0.0.0.0.0">
           <transf name="destruct" arg1="Hinst1">
            <goal name="case1.1.0.0.0.1.0.0.0.0.0.0">
            <transf name="destruct" arg1="Hinst2">
             <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.0" expl="destruct premise">
             <proof prover="2"><result status="valid" time="0.16" steps="41372"/></proof>
             </goal>
             <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1">
             <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="958445"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="133997"/></proof>
             <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
             <transf name="replace" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
              <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0">
              <transf name="replace" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
               <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="970313"/></proof>
               <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="122405"/></proof>
               <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
               <transf name="compile_match" >
                <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="979124"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="121697"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" >
                 <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="980567"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="131128"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 <transf name="replace" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                  <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0">
                  <proof prover="2"><result status="valid" time="1.06" steps="111690"/></proof>
                  </goal>
                  <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis">
                  <proof prover="2"><result status="timeout" time="1.00" steps="133348"/></proof>
                  <proof prover="4"><result status="valid" time="0.80" steps="1479"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.0.1" expl="equality hypothesis">
               <proof prover="2"><result status="timeout" time="1.00" steps="125945"/></proof>
               <proof prover="4"><result status="valid" time="0.02" steps="42"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="case1.1.0.0.0.1.0.0.0.0.0.0.1.1" expl="equality hypothesis">
              <proof prover="2"><result status="valid" time="1.63" steps="183811"/></proof>
              <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="38"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="case1.1.1" expl="equality hypothesis">
   <proof prover="2"><result status="valid" time="0.21" steps="45548"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file format="whyml">
<path name=".."/><path name="horn_perm.mlw"/>
<theory name="Evals" proved="true">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="101883"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="323693"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="502065"/></proof>
 <proof prover="1"><result status="failure" time="0.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="166565"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="27361"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.18" steps="36362"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17" steps="32013"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="30230"/></proof>
 </goal>
</theory>
<theory name="SAT" proved="true">
 <goal name="if_unsat_then_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28444"/></proof>
 </goal>
 <goal name="top_is_satisfiable" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1694285"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="384447"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="top_is_satisfiable.0" proved="true">
  <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1704407"/></proof>
  <proof prover="1" timelimit="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1737295"/></proof>
  <transf name="unfold" proved="true" arg1="is_satisfiable_rs">
   <goal name="top_is_satisfiable.0.0" proved="true">
   <transf name="exists" proved="true" arg1="id_val">
    <goal name="top_is_satisfiable.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.11" steps="28092"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="bot_is_unsatisfiable" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29040"/></proof>
 </goal>
 <goal name="if_satisf_then_not_bottom" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="27834"/></proof>
 </goal>
</theory>
<theory name="Converts" proved="true">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="30297"/></proof>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="28488"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="29006"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="29853"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="148334"/></proof>
 <proof prover="4"><result status="valid" time="0.18" steps="801"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="781563"/></proof>
 <proof prover="1"><result status="failure" time="0.00"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="138587"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <proof prover="5"><result status="failure" time="0.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="convertAFtoPL_evaluation.0" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="780000"/></proof>
  <proof prover="1"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1479244"/></proof>
  <proof prover="3"><result status="failure" time="0.00"/></proof>
  <proof prover="4" timelimit="5"><result status="valid" time="2.22" steps="1723"/></proof>
  <proof prover="5"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="821519"/></proof>
 <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
 <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1508373"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="822680"/></proof>
  <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
  <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1520647"/></proof>
  <transf name="unfold" proved="true" arg1="convertPLtoAF">
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <transf name="compile_match" proved="true" >
    <goal name="PLtoAF_AFtoPL.0.0.0" proved="true">
    <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="823221"/></proof>
    <proof prover="1" timelimit="5"><result status="failure" time="0.00"/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1498044"/></proof>
    <transf name="destruct_term" proved="true" arg1="x">
     <goal name="PLtoAF_AFtoPL.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="0.13" steps="29347"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.13" steps="29226"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
     <goal name="PLtoAF_AFtoPL.0.0.0.2" proved="true">
     <proof prover="2"><result status="valid" time="0.06" steps="25457"/></proof>
     <proof prover="5"><result status="failure" time="0.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Logic" proved="true">
 <goal name="subset_findFirst" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="2145111"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="185534"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="160785"/></proof>
   <proof prover="4"><result status="valid" time="0.14" steps="722"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="2504420"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="368978"/></proof>
 <proof prover="4"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="64478"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="2"><result status="valid" time="0.19" steps="37494"/></proof>
 </goal>
 <goal name="G" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="27292"/></proof>
 </goal>
</theory>
<theory name="Horn">
 <goal name="aux&#39;vc" expl="VC for aux" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="590613"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="127265"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="aux&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="27161"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="aux&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="33359"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="aux&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="63834"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="aux&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="30802"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
  <goal name="aux&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24" steps="40822"/></proof>
  <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="union_eval_empty" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="33925"/></proof>
 </goal>
 <goal name="union_eval_samesingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="37169"/></proof>
 </goal>
 <goal name="union_eval_diffsingleton" proved="true">
 <proof prover="2"><result status="valid" time="0.70" steps="87570"/></proof>
 </goal>
 <goal name="add_then_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="33411"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma&#39;vc" expl="VC for convertConjunctionToSet_lemma" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="36455"/></proof>
 </goal>
 <goal name="convertConjunctionToSet_lemma1&#39;vc" expl="VC for convertConjunctionToSet_lemma1" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2961440"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165773"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma1&#39;vc.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="3251388"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="189776"/></proof>
  <proof prover="4"><result status="timeout" time="1.00"/></proof>
  <transf name="unfold" proved="true" arg1="op_and">
   <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="2631859"/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="155776"/></proof>
   <proof prover="4"><result status="timeout" time="1.00"/></proof>
   <transf name="destruct_term" proved="true" arg1="phi">
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="2"><result status="valid" time="0.18" steps="36636"/></proof>
    </goal>
    <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2241017"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="186873"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    <transf name="subst" proved="true" arg1="phi">
     <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
     <transf name="compile_match" proved="true" >
      <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
      <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="8219103"/></proof>
      <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1429751"/></proof>
      <proof prover="4" timelimit="5"><result status="timeout" time="5.00"/></proof>
      <transf name="instantiate" proved="true" arg1="convertAFtoPL&#39;spec" arg2="y">
       <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
       <proof prover="0"><result status="timeout" time="1.00" steps="2529285"/></proof>
       <proof prover="2"><result status="timeout" time="1.00" steps="218594"/></proof>
       <proof prover="4"><result status="timeout" time="1.00"/></proof>
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="2598356"/></proof>
        <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1462223"/></proof>
        <proof prover="4" timelimit="5"><result status="valid" time="3.79" steps="2968"/></proof>
        </goal>
        <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="2531136"/></proof>
        <proof prover="2"><result status="timeout" time="1.00" steps="275991"/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        <transf name="compile_match" proved="true" >
         <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
         <proof prover="0"><result status="timeout" time="1.00" steps="2504673"/></proof>
         <proof prover="2"><result status="timeout" time="1.00" steps="275991"/></proof>
         <proof prover="4"><result status="timeout" time="1.00"/></proof>
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="2"><result status="valid" time="0.08" steps="28259"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0"><result status="timeout" time="1.00" steps="2423383"/></proof>
          <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="2708204"/></proof>
          <proof prover="4" timelimit="5"><result status="valid" time="1.34" steps="596"/></proof>
          </goal>
          <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2" expl="VC for convertConjunctionToSet_lemma1" proved="true">
          <proof prover="0"><result status="timeout" time="1.00" steps="2477801"/></proof>
          <proof prover="2"><result status="timeout" time="1.00" steps="226250"/></proof>
          <proof prover="4"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct_term" proved="true" arg1="x1">
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.0" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.20" steps="37554"/></proof>
           </goal>
           <goal name="convertConjunctionToSet_lemma1&#39;vc.0.0.1.0.0.0.1.0.2.1" expl="VC for convertConjunctionToSet_lemma1" proved="true">
           <proof prover="2"><result status="valid" time="0.18" steps="35196"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2711962"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="161381"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2501093"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="177765"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="destruct" proved="true" arg1="H">
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="valid" time="0.09" steps="270831"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="63694"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.07" steps="211"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2386155"/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1430945"/></proof>
    <proof prover="4" timelimit="5"><result status="valid" time="2.23" steps="2035"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="convertConjunctionToSet_lemma_differs_singleton_atop&#39;vc.0.1" expl="VC for convertConjunctionToSet_lemma_differs_singleton_atop" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2489260"/></proof>
   <proof prover="2"><result status="valid" time="0.35" steps="63863"/></proof>
   <proof prover="4" timelimit="5" obsolete="true"><result status="valid" time="2.22" steps="2035"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="convertConjunctionToSet_lemma_subset&#39;vc" expl="VC for convertConjunctionToSet_lemma_subset" proved="true">
 <proof prover="2"><result status="valid" time="0.20" steps="40176"/></proof>
 </goal>
 <goal name="pp_same_p" proved="true">
 <proof prover="2"><result status="valid" time="0.31" steps="51146"/></proof>
 </goal>
 <goal name="eval_equivalent&#39;vc" expl="VC for eval_equivalent" proved="true">
 <proof prover="2"><result status="timeout" time="1.00" steps="178737"/></proof>
 <proof prover="4"><result status="valid" time="0.31" steps="1867"/></proof>
 </goal>
 <goal name="convertToSet&#39;vc" expl="VC for convertToSet" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="35630"/></proof>
 </goal>
 <goal name="convertToList&#39;vc" expl="VC for convertToList" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="39238"/></proof>
 </goal>
 <goal name="fset_from_list_distr" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2401631"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="310305"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="fset_from_list_distr.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2472351"/></proof>
  <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="310274"/></proof>
  <transf name="induction_arg_ty_lex" proved="true" arg1="left">
   <goal name="fset_from_list_distr.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fset_from_list_distr.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="37228"/></proof>
    <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
    </goal>
    <goal name="fset_from_list_distr.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2765999"/></proof>
    <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="201978"/></proof>
    <transf name="compute_hyp_specified" proved="true" >
     <goal name="fset_from_list_distr.0.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.24" steps="43654"/></proof>
     <proof prover="5" obsolete="true"><result status="failure" time="0.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_spec_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2763725"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165584"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_spec_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_spec_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1742718"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.53" steps="99027"/></proof>
   <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="1028"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_spec_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2554255"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="236263"/></proof>
    <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
    <goal name="not_subset_spec_findFirst.0.0.1" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3078664"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="162307"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_spec_findFirst.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3089687"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="261503"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
     <goal name="not_subset_spec_findFirst.0.0.1.1" proved="true">
     <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="11209234"/></proof>
     <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="1699551"/></proof>
     <proof prover="4" timelimit="5"><result status="timeout" time="5.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_spec_findFirst.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="274261"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="114"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_if_right_nil" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="8520940"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1895071"/></proof>
 <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_if_right_nil.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_if_right_nil.0.0" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="183087"/></proof>
   <proof prover="4"><result status="valid" time="0.18" steps="998"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_findFirst" proved="true">
 <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="4205157"/></proof>
 <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="1122816"/></proof>
 <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="subset_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2180989"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="193793"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="subset_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2175080"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="191349"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct_term" proved="true" arg1="clauselist">
     <goal name="subset_findFirst.0.0.0.0" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2121716"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187241"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="subst" proved="true" arg1="clauselist">
      <goal name="subset_findFirst.0.0.0.0.0" proved="true">
      <transf name="compile_match" proved="true" >
       <goal name="subset_findFirst.0.0.0.0.0.0" proved="true">
       <proof prover="2"><result status="timeout" time="1.00" steps="176784"/></proof>
       <proof prover="4"><result status="valid" time="0.21" steps="1504"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="subset_findFirst.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="0.18" steps="40554"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="concat_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2484317"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="289845"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="concat_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="concat_findFirst.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.50" steps="94099"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="algorithmA_spec&#39;vc" expl="VC for algorithmA_spec" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="3376130"/></proof>
 <proof prover="2"><result status="valid" time="1.84" steps="162686"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="findFirst&#39;vc" expl="VC for findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2694797"/></proof>
 <proof prover="1" obsolete="true"><result status="failure" time="0.00"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154187"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="findFirst&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1"><undone/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="172216"/></proof>
  <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="5"><undone/></proof>
  </goal>
  <goal name="findFirst&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="2423265"/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="219510"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="36517"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="41"/></proof>
   <proof prover="5"><undone/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.1" expl="postcondition" proved="true">
   <proof prover="1"><undone/></proof>
   <proof prover="2"><result status="valid" time="0.14" steps="36590"/></proof>
   <proof prover="5"><undone/></proof>
   </goal>
   <goal name="findFirst&#39;vc.1.2" expl="postcondition" proved="true">
   <proof prover="2"><result status="timeout" time="1.00" steps="177451"/></proof>
   <proof prover="4"><result status="valid" time="0.02" steps="44"/></proof>
   <proof prover="5"><undone/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="findFirst&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="1.00" steps="152473"/></proof>
  <proof prover="3"><undone/></proof>
  <proof prover="4"><result status="timeout" time="1.00"/></proof>
  <proof prover="5"><undone/></proof>
  </goal>
  <goal name="findFirst&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="2940533"/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="165423"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="findFirst&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="2715442"/></proof>
   <proof prover="1"><undone/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="159903"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2654036"/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><result status="valid" time="0.29" steps="52953"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.39" steps="66552"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2616339"/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="157998"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.29" steps="50340"/></proof>
      <proof prover="4"><result status="valid" time="0.07" steps="489"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.0.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2608141"/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="156385"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    <proof prover="5"><undone/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.0.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.0.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.33" steps="53133"/></proof>
      <proof prover="4"><result status="timeout" time="1.00"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="findFirst&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="2694447"/></proof>
   <proof prover="1"><undone/></proof>
   <proof prover="2"><result status="timeout" time="1.00" steps="160019"/></proof>
   <proof prover="4"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="findFirst&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.05" steps="146286"/></proof>
    <proof prover="1" timelimit="5"><undone/></proof>
    <proof prover="2" timelimit="5"><result status="valid" time="0.22" steps="42691"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.39" steps="66344"/></proof>
      <proof prover="4"><result status="valid" time="0.03" steps="49"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="0" timelimit="5"><result status="timeout" time="5.00" steps="9086325"/></proof>
    <proof prover="1" timelimit="5"><undone/></proof>
    <proof prover="2" timelimit="5"><result status="timeout" time="5.00" steps="890140"/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.27" steps="48184"/></proof>
      <proof prover="4"><result status="valid" time="0.05" steps="272"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="findFirst&#39;vc.3.1.2" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2621410"/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="140350"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    <proof prover="5"><undone/></proof>
    <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="H">
     <goal name="findFirst&#39;vc.3.1.2.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" >
      <goal name="findFirst&#39;vc.3.1.2.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.33" steps="53260"/></proof>
      <proof prover="4"><result status="timeout" time="1.00"/></proof>
      <proof prover="5"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset_findFirst" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2683091"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="221316"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="not_subset_findFirst.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="clauselist">
   <goal name="not_subset_findFirst.0.0" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2644684"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.53" steps="89225"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="not_subset_findFirst.0.0.0" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2426593"/></proof>
    <proof prover="2"><result status="valid" time="0.18" steps="40377"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
    <goal name="not_subset_findFirst.0.0.1" proved="true">
    <proof prover="0"><result status="timeout" time="1.00" steps="2318390"/></proof>
    <proof prover="2"><result status="timeout" time="1.00" steps="170436"/></proof>
    <proof prover="4"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="not_subset_findFirst.0.0.1.0" expl="destruct premise" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2234805"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="163254"/></proof>
     <proof prover="4"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
     <goal name="not_subset_findFirst.0.0.1.1" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2605350"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="171919"/></proof>
     <proof prover="4"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="not_subset_findFirst.0.0.1.1.0" proved="true">
      <proof prover="2"><result status="timeout" time="1.00" steps="160103"/></proof>
      <proof prover="4"><result status="valid" time="0.04" steps="267"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_subset" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="39695"/></proof>
 </goal>
 <goal name="subset" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="42632"/></proof>
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA" proved="true">
 <proof prover="2"><result status="valid" time="0.29" steps="58323"/></proof>
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="42422"/></proof>
 </goal>
 <goal name="case1_top_imples_p" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2463643"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="126152"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_top_imples_p.0" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="45216"/></proof>
  </goal>
  <goal name="case1_top_imples_p.1" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="2527138"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="117894"/></proof>
  <proof prover="4"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="(clauselist)">
   <goal name="case1_top_imples_p.1.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_top_imples_p.1.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_top_imples_p.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.15" steps="40407"/></proof>
     </goal>
     <goal name="case1_top_imples_p.1.0.0.1" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="2670521"/></proof>
     <proof prover="2"><result status="timeout" time="1.00" steps="119625"/></proof>
     <proof prover="4"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_top_imples_p.1.0.0.1.0" proved="true">
      <proof prover="0"><result status="timeout" time="1.00" steps="2551525"/></proof>
      <proof prover="2"><result status="timeout" time="1.00" steps="108168"/></proof>
      <proof prover="4"><result status="timeout" time="1.00"/></proof>
      <transf name="subst" proved="true" arg1="clauselist">
       <goal name="case1_top_imples_p.1.0.0.1.0.0" proved="true">
       <transf name="subst" proved="true" arg1="clause">
        <goal name="case1_top_imples_p.1.0.0.1.0.0.0" proved="true">
        <proof prover="0"><result status="timeout" time="1.00" steps="854206"/></proof>
        <proof prover="2"><result status="timeout" time="1.00" steps="110165"/></proof>
        <proof prover="4"><result status="timeout" time="1.00"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0" proved="true">
         <transf name="compile_match" proved="true" >
          <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0" proved="true">
          <transf name="eliminate_let" proved="true" >
           <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst1">
             <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst2">
              <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
              <proof prover="2"><result status="valid" time="0.15" steps="39651"/></proof>
              </goal>
              <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="0"><result status="timeout" time="1.00" steps="1030602"/></proof>
              <proof prover="2"><result status="timeout" time="1.00" steps="150794"/></proof>
              <proof prover="4"><result status="timeout" time="1.00"/></proof>
              <transf name="replace" proved="true" arg1="(left)" arg2="(Nil)" arg3="in" arg4="Hinst">
               <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0" proved="true">
               <transf name="replace" proved="true" arg1="(right)" arg2="(Cons (singleton ATop, p) (Nil))" arg3="in" arg4="Hinst">
                <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0" proved="true">
                <proof prover="0"><result status="timeout" time="1.00" steps="1053451"/></proof>
                <proof prover="2"><result status="timeout" time="1.00" steps="149490"/></proof>
                <proof prover="4"><result status="timeout" time="1.00"/></proof>
                <transf name="compile_match" proved="true" >
                 <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0" proved="true">
                 <proof prover="0"><result status="timeout" time="1.00" steps="1060595"/></proof>
                 <proof prover="2"><result status="timeout" time="1.00" steps="136678"/></proof>
                 <proof prover="4"><result status="timeout" time="1.00"/></proof>
                 <transf name="compile_match" proved="true" >
                  <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0" proved="true">
                  <proof prover="0"><result status="timeout" time="1.00" steps="1060201"/></proof>
                  <proof prover="2"><result status="timeout" time="1.00" steps="136149"/></proof>
                  <proof prover="4"><result status="timeout" time="1.00"/></proof>
                  <transf name="replace" proved="true" arg1="(algorithmA_spec
    ((Nil: list (fset atomicformula, rightside))
     ++ (Nil: list (fset atomicformula, rightside)))
    (add (convertRStoAF p) (singleton ATop)))" arg2="((add (convertRStoAF p) (singleton ATop)))" arg3="in" arg4="Hinst">
                   <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.0" proved="true">
                   <proof prover="0"><result status="timeout" time="1.00" steps="1008332"/></proof>
                   <proof prover="2"><result status="valid" time="0.68" steps="87014"/></proof>
                   <proof prover="4"><result status="timeout" time="1.00"/></proof>
                   </goal>
                   <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="timeout" time="1.00" steps="120752"/></proof>
                   <proof prover="4"><result status="valid" time="0.70" steps="1530"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="timeout" time="1.00" steps="129492"/></proof>
                <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="case1_top_imples_p.1.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.71" steps="103943"/></proof>
               <proof prover="4"><result status="valid" time="0.02" steps="40"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1_conjuction_imples_p" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1276645"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124114"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="case1_conjuction_imples_p.0" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1183404"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124935"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" proved="true" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case1_conjuction_imples_p.0.0" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(singleton ATop)">
    <goal name="case1_conjuction_imples_p.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="case1_conjuction_imples_p.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.16" steps="40641"/></proof>
     </goal>
     <goal name="case1_conjuction_imples_p.0.0.0.1" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1187744"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="125573"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="case1_conjuction_imples_p.0.0.0.1.0" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1254019"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="152247"/></proof>
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="999"/></proof>
      <transf name="destruct_term" proved="true" arg1="right">
       <goal name="case1_conjuction_imples_p.0.0.0.1.0.0" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1215783"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="154201"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="981"/></proof>
       <transf name="assert" proved="true" arg1="(right = Nil)">
        <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="148071"/></proof>
        <proof prover="2"><result status="valid" time="0.34" steps="54230"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.03" steps="53"/></proof>
        </goal>
        <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2202572"/></proof>
        <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="53948"/></proof>
        <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="979"/></proof>
        <transf name="unfold" proved="true" arg1="findFirst" arg2="in" arg3="Hinst1">
         <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2222131"/></proof>
         <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="67586"/></proof>
         <proof prover="4" obsolete="true"><result status="valid" time="0.08" steps="505"/></proof>
         <transf name="subst" proved="true" arg1="clauselist">
          <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0" proved="true">
          <transf name="subst" proved="true" arg1="clause">
           <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0" proved="true">
           <transf name="compile_match" proved="true" >
            <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0" proved="true">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2833690"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="124102"/></proof>
            <proof prover="4" obsolete="true"><result status="valid" time="0.04" steps="322"/></proof>
            <transf name="eliminate_let" proved="true" >
             <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0" proved="true">
              <transf name="destruct" proved="true" arg1="Hinst1">
               <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0" proved="true">
               <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="4376259"/></proof>
               <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="137579"/></proof>
               <proof prover="4" obsolete="true"><result status="valid" time="0.06" steps="348"/></proof>
               <transf name="destruct" proved="true" arg1="Hinst1">
                <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                <proof prover="2"><result status="valid" time="0.10" steps="42695"/></proof>
                </goal>
                <goal name="case1_conjuction_imples_p.0.0.0.1.0.0.1.0.0.0.0.0.0.0.1" proved="true">
                <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="156508"/></proof>
                <proof prover="2"><result status="valid" time="0.27" steps="43223"/></proof>
                <proof prover="4" obsolete="true"><result status="valid" time="0.05" steps="247"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="case1_conjuction_imples_p.0.0.0.1.0.1" proved="true">
       <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="147543"/></proof>
       <proof prover="2"><result status="valid" time="0.17" steps="41202"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="966"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case1_general" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="910017"/></proof>
 <proof prover="2"><result status="valid" time="0.15" steps="42309"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="case1_general_top_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.16" steps="42501"/></proof>
 </goal>
 <goal name="case_general_conjuction_imples_p" proved="true">
 <proof prover="2"><result status="valid" time="0.14" steps="42737"/></proof>
 </goal>
 <goal name="case1_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1991603"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="161280"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case1_list.0">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2611328"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158114"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case1_list.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="c">
    <goal name="case1_list.0.0.0">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2416375"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159792"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="destruct" arg1="Hinst">
     <goal name="case1_list.0.0.0.0" expl="destruct premise">
     <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="7762"/></proof>
     <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="37709"/></proof>
     <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="44"/></proof>
     </goal>
     <goal name="case1_list.0.0.0.1">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2446020"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="159779"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <transf name="destruct" arg1="Hinst">
      <goal name="case1_list.0.0.0.1.0">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2739576"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="144687"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <transf name="destruct_term" arg1="right">
       <goal name="case1_list.0.0.0.1.0.0">
       <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2330448"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="150250"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
       <transf name="subst" arg1="right">
        <goal name="case1_list.0.0.0.1.0.0.0">
        <transf name="destruct_term" arg1="x1">
         <goal name="case1_list.0.0.0.1.0.0.0.0">
         <transf name="subst" arg1="x3">
          <goal name="case1_list.0.0.0.1.0.0.0.0.0">
          <transf name="compile_match" >
           <goal name="case1_list.0.0.0.1.0.0.0.0.0.0">
           <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2410599"/></proof>
           <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="110005"/></proof>
           <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
           <transf name="assert" arg1="((convertRStoAF x1) &lt;&gt; ABot)">
            <goal name="case1_list.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula">
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="129375"/></proof>
            <proof prover="4" obsolete="true"><result status="valid" time="0.95" steps="2907"/></proof>
            </goal>
            <goal name="case1_list.0.0.0.1.0.0.0.0.0.0.1">
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="112111"/></proof>
            <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="2427"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="case1_list.0.0.0.1.0.1">
       <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="39995"/></proof>
       <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="41879"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="50"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case2_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="1165097"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="179511"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="case2_list.0">
  <transf name="instantiate" arg1="algorithmA_spec&#39;def" arg2="clauselist">
   <goal name="case2_list.0.0">
   <transf name="instantiate" arg1="Hinst" arg2="c">
    <goal name="case2_list.0.0.0">
    <transf name="destruct" arg1="Hinst">
     <goal name="case2_list.0.0.0.0" expl="destruct premise">
     <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="37928"/></proof>
     </goal>
     <goal name="case2_list.0.0.0.1">
     <transf name="destruct" arg1="Hinst">
      <goal name="case2_list.0.0.0.1.0">
      <transf name="destruct" arg1="Hinst">
       <goal name="case2_list.0.0.0.1.0.0">
       <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="41790"/></proof>
       <proof prover="4" obsolete="true"><result status="valid" time="0.02" steps="50"/></proof>
       </goal>
       <goal name="case2_list.0.0.0.1.0.1">
       <proof prover="0" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="7375026"/></proof>
       <proof prover="2" timelimit="5" obsolete="true"><result status="timeout" time="5.00" steps="698290"/></proof>
       <proof prover="4" timelimit="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <transf name="unfold" arg1="is_satisfiable_clauselist" arg2="in" arg3="H">
        <goal name="case2_list.0.0.0.1.0.1.0">
        <transf name="subst" arg1="clauselist">
         <goal name="case2_list.0.0.0.1.0.1.0.0">
         <transf name="compile_match" >
          <goal name="case2_list.0.0.0.1.0.1.0.0.0">
          <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="600638"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="184568"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
          <transf name="destruct" arg1="H">
           <goal name="case2_list.0.0.0.1.0.1.0.0.0.0">
           <transf name="unfold" arg1="is_satisfiable_clause" arg2="in" arg3="H1">
            <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0">
            <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="603136"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="168268"/></proof>
            <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
            <transf name="destruct_term" arg1="clause">
             <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0">
             <transf name="subst" arg1="clause">
              <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0.0">
              <transf name="compile_match" >
               <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0.0.0">
               <transf name="eliminate_let" >
                <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0">
                <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="615333"/></proof>
                <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="184395"/></proof>
                <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                <transf name="destruct" arg1="H1">
                 <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0.0">
                 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="610366"/></proof>
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="165245"/></proof>
                 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
                 </goal>
                 <goal name="case2_list.0.0.0.1.0.1.0.0.0.0.0.0.0.0.0.1">
                 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="158431"/></proof>
                 <proof prover="4" obsolete="true"><result status="valid" time="0.63" steps="3791"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="case_clause_list">
 <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="46147"/></proof>
 </goal>
 <goal name="case_induction_list">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2468051"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="148277"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
 <goal name="horn_proof">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="2257167"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="141920"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
</file>
</why3session>
